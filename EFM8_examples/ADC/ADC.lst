0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Fri Mar 21 16:01:25 2025
0000              5   ;--------------------------------------------------------
                  5   $name ADC
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _InitPushButton
0000             30            public _Volts_at_Pin
0000             31            public _ADC_at_Pin
0000             32            public _InitPinADC
0000             33            public _waitms
0000             34            public _Timer3us
0000             35            public _InitADC
0000             36            public __c51_external_startup
0000             37   ;--------------------------------------------------------
0000             38   ; Special Function Registers
0000             39   ;--------------------------------------------------------
0000             40   _ACC            DATA 0xe0
0000             41   _ADC0ASAH       DATA 0xb6
0000             42   _ADC0ASAL       DATA 0xb5
0000             43   _ADC0ASCF       DATA 0xa1
0000             44   _ADC0ASCT       DATA 0xc7
0000             45   _ADC0CF0        DATA 0xbc
0000             46   _ADC0CF1        DATA 0xb9
0000             47   _ADC0CF2        DATA 0xdf
0000             48   _ADC0CN0        DATA 0xe8
0000             49   _ADC0CN1        DATA 0xb2
0000             50   _ADC0CN2        DATA 0xb3
0000             51   _ADC0GTH        DATA 0xc4
0000             52   _ADC0GTL        DATA 0xc3
0000             53   _ADC0H          DATA 0xbe
0000             54   _ADC0L          DATA 0xbd
0000             55   _ADC0LTH        DATA 0xc6
0000             56   _ADC0LTL        DATA 0xc5
0000             57   _ADC0MX         DATA 0xbb
0000             58   _B              DATA 0xf0
0000             59   _CKCON0         DATA 0x8e
0000             60   _CKCON1         DATA 0xa6
0000             61   _CLEN0          DATA 0xc6
0000             62   _CLIE0          DATA 0xc7
0000             63   _CLIF0          DATA 0xe8
0000             64   _CLKSEL         DATA 0xa9
0000             65   _CLOUT0         DATA 0xd1
0000             66   _CLU0CF         DATA 0xb1
0000             67   _CLU0FN         DATA 0xaf
0000             68   _CLU0MX         DATA 0x84
0000             69   _CLU1CF         DATA 0xb3
0000             70   _CLU1FN         DATA 0xb2
0000             71   _CLU1MX         DATA 0x85
0000             72   _CLU2CF         DATA 0xb6
0000             73   _CLU2FN         DATA 0xb5
0000             74   _CLU2MX         DATA 0x91
0000             75   _CLU3CF         DATA 0xbf
0000             76   _CLU3FN         DATA 0xbe
0000             77   _CLU3MX         DATA 0xae
0000             78   _CMP0CN0        DATA 0x9b
0000             79   _CMP0CN1        DATA 0x99
0000             80   _CMP0MD         DATA 0x9d
0000             81   _CMP0MX         DATA 0x9f
0000             82   _CMP1CN0        DATA 0xbf
0000             83   _CMP1CN1        DATA 0xac
0000             84   _CMP1MD         DATA 0xab
0000             85   _CMP1MX         DATA 0xaa
0000             86   _CRC0CN0        DATA 0xce
0000             87   _CRC0CN1        DATA 0x86
0000             88   _CRC0CNT        DATA 0xd3
0000             89   _CRC0DAT        DATA 0xcb
0000             90   _CRC0FLIP       DATA 0xcf
0000             91   _CRC0IN         DATA 0xca
0000             92   _CRC0ST         DATA 0xd2
0000             93   _DAC0CF0        DATA 0x91
0000             94   _DAC0CF1        DATA 0x92
0000             95   _DAC0H          DATA 0x85
0000             96   _DAC0L          DATA 0x84
0000             97   _DAC1CF0        DATA 0x93
0000             98   _DAC1CF1        DATA 0x94
0000             99   _DAC1H          DATA 0x8a
0000            100   _DAC1L          DATA 0x89
0000            101   _DAC2CF0        DATA 0x95
0000            102   _DAC2CF1        DATA 0x96
0000            103   _DAC2H          DATA 0x8c
0000            104   _DAC2L          DATA 0x8b
0000            105   _DAC3CF0        DATA 0x9a
0000            106   _DAC3CF1        DATA 0x9c
0000            107   _DAC3H          DATA 0x8e
0000            108   _DAC3L          DATA 0x8d
0000            109   _DACGCF0        DATA 0x88
0000            110   _DACGCF1        DATA 0x98
0000            111   _DACGCF2        DATA 0xa2
0000            112   _DERIVID        DATA 0xad
0000            113   _DEVICEID       DATA 0xb5
0000            114   _DPH            DATA 0x83
0000            115   _DPL            DATA 0x82
0000            116   _EIE1           DATA 0xe6
0000            117   _EIE2           DATA 0xf3
0000            118   _EIP1           DATA 0xbb
0000            119   _EIP1H          DATA 0xee
0000            120   _EIP2           DATA 0xed
0000            121   _EIP2H          DATA 0xf6
0000            122   _EMI0CN         DATA 0xe7
0000            123   _FLKEY          DATA 0xb7
0000            124   _HFO0CAL        DATA 0xc7
0000            125   _HFO1CAL        DATA 0xd6
0000            126   _HFOCN          DATA 0xef
0000            127   _I2C0ADM        DATA 0xff
0000            128   _I2C0CN0        DATA 0xba
0000            129   _I2C0DIN        DATA 0xbc
0000            130   _I2C0DOUT       DATA 0xbb
0000            131   _I2C0FCN0       DATA 0xad
0000            132   _I2C0FCN1       DATA 0xab
0000            133   _I2C0FCT        DATA 0xf5
0000            134   _I2C0SLAD       DATA 0xbd
0000            135   _I2C0STAT       DATA 0xb9
0000            136   _IE             DATA 0xa8
0000            137   _IP             DATA 0xb8
0000            138   _IPH            DATA 0xf2
0000            139   _IT01CF         DATA 0xe4
0000            140   _LFO0CN         DATA 0xb1
0000            141   _P0             DATA 0x80
0000            142   _P0MASK         DATA 0xfe
0000            143   _P0MAT          DATA 0xfd
0000            144   _P0MDIN         DATA 0xf1
0000            145   _P0MDOUT        DATA 0xa4
0000            146   _P0SKIP         DATA 0xd4
0000            147   _P1             DATA 0x90
0000            148   _P1MASK         DATA 0xee
0000            149   _P1MAT          DATA 0xed
0000            150   _P1MDIN         DATA 0xf2
0000            151   _P1MDOUT        DATA 0xa5
0000            152   _P1SKIP         DATA 0xd5
0000            153   _P2             DATA 0xa0
0000            154   _P2MASK         DATA 0xfc
0000            155   _P2MAT          DATA 0xfb
0000            156   _P2MDIN         DATA 0xf3
0000            157   _P2MDOUT        DATA 0xa6
0000            158   _P2SKIP         DATA 0xcc
0000            159   _P3             DATA 0xb0
0000            160   _P3MDIN         DATA 0xf4
0000            161   _P3MDOUT        DATA 0x9c
0000            162   _PCA0CENT       DATA 0x9e
0000            163   _PCA0CLR        DATA 0x9c
0000            164   _PCA0CN0        DATA 0xd8
0000            165   _PCA0CPH0       DATA 0xfc
0000            166   _PCA0CPH1       DATA 0xea
0000            167   _PCA0CPH2       DATA 0xec
0000            168   _PCA0CPH3       DATA 0xf5
0000            169   _PCA0CPH4       DATA 0x85
0000            170   _PCA0CPH5       DATA 0xde
0000            171   _PCA0CPL0       DATA 0xfb
0000            172   _PCA0CPL1       DATA 0xe9
0000            173   _PCA0CPL2       DATA 0xeb
0000            174   _PCA0CPL3       DATA 0xf4
0000            175   _PCA0CPL4       DATA 0x84
0000            176   _PCA0CPL5       DATA 0xdd
0000            177   _PCA0CPM0       DATA 0xda
0000            178   _PCA0CPM1       DATA 0xdb
0000            179   _PCA0CPM2       DATA 0xdc
0000            180   _PCA0CPM3       DATA 0xae
0000            181   _PCA0CPM4       DATA 0xaf
0000            182   _PCA0CPM5       DATA 0xcc
0000            183   _PCA0H          DATA 0xfa
0000            184   _PCA0L          DATA 0xf9
0000            185   _PCA0MD         DATA 0xd9
0000            186   _PCA0POL        DATA 0x96
0000            187   _PCA0PWM        DATA 0xf7
0000            188   _PCON0          DATA 0x87
0000            189   _PCON1          DATA 0xcd
0000            190   _PFE0CN         DATA 0xc1
0000            191   _PRTDRV         DATA 0xf6
0000            192   _PSCTL          DATA 0x8f
0000            193   _PSTAT0         DATA 0xaa
0000            194   _PSW            DATA 0xd0
0000            195   _REF0CN         DATA 0xd1
0000            196   _REG0CN         DATA 0xc9
0000            197   _REVID          DATA 0xb6
0000            198   _RSTSRC         DATA 0xef
0000            199   _SBCON1         DATA 0x94
0000            200   _SBRLH1         DATA 0x96
0000            201   _SBRLL1         DATA 0x95
0000            202   _SBUF           DATA 0x99
0000            203   _SBUF0          DATA 0x99
0000            204   _SBUF1          DATA 0x92
0000            205   _SCON           DATA 0x98
0000            206   _SCON0          DATA 0x98
0000            207   _SCON1          DATA 0xc8
0000            208   _SFRPAGE        DATA 0xa7
0000            209   _SFRPGCN        DATA 0xbc
0000            210   _SFRSTACK       DATA 0xd7
0000            211   _SMB0ADM        DATA 0xd6
0000            212   _SMB0ADR        DATA 0xd7
0000            213   _SMB0CF         DATA 0xc1
0000            214   _SMB0CN0        DATA 0xc0
0000            215   _SMB0DAT        DATA 0xc2
0000            216   _SMB0FCN0       DATA 0xc3
0000            217   _SMB0FCN1       DATA 0xc4
0000            218   _SMB0FCT        DATA 0xef
0000            219   _SMB0RXLN       DATA 0xc5
0000            220   _SMB0TC         DATA 0xac
0000            221   _SMOD1          DATA 0x93
0000            222   _SP             DATA 0x81
0000            223   _SPI0CFG        DATA 0xa1
0000            224   _SPI0CKR        DATA 0xa2
0000            225   _SPI0CN0        DATA 0xf8
0000            226   _SPI0DAT        DATA 0xa3
0000            227   _SPI0FCN0       DATA 0x9a
0000            228   _SPI0FCN1       DATA 0x9b
0000            229   _SPI0FCT        DATA 0xf7
0000            230   _SPI0PCF        DATA 0xdf
0000            231   _TCON           DATA 0x88
0000            232   _TH0            DATA 0x8c
0000            233   _TH1            DATA 0x8d
0000            234   _TL0            DATA 0x8a
0000            235   _TL1            DATA 0x8b
0000            236   _TMOD           DATA 0x89
0000            237   _TMR2CN0        DATA 0xc8
0000            238   _TMR2CN1        DATA 0xfd
0000            239   _TMR2H          DATA 0xcf
0000            240   _TMR2L          DATA 0xce
0000            241   _TMR2RLH        DATA 0xcb
0000            242   _TMR2RLL        DATA 0xca
0000            243   _TMR3CN0        DATA 0x91
0000            244   _TMR3CN1        DATA 0xfe
0000            245   _TMR3H          DATA 0x95
0000            246   _TMR3L          DATA 0x94
0000            247   _TMR3RLH        DATA 0x93
0000            248   _TMR3RLL        DATA 0x92
0000            249   _TMR4CN0        DATA 0x98
0000            250   _TMR4CN1        DATA 0xff
0000            251   _TMR4H          DATA 0xa5
0000            252   _TMR4L          DATA 0xa4
0000            253   _TMR4RLH        DATA 0xa3
0000            254   _TMR4RLL        DATA 0xa2
0000            255   _TMR5CN0        DATA 0xc0
0000            256   _TMR5CN1        DATA 0xf1
0000            257   _TMR5H          DATA 0xd5
0000            258   _TMR5L          DATA 0xd4
0000            259   _TMR5RLH        DATA 0xd3
0000            260   _TMR5RLL        DATA 0xd2
0000            261   _UART0PCF       DATA 0xd9
0000            262   _UART1FCN0      DATA 0x9d
0000            263   _UART1FCN1      DATA 0xd8
0000            264   _UART1FCT       DATA 0xfa
0000            265   _UART1LIN       DATA 0x9e
0000            266   _UART1PCF       DATA 0xda
0000            267   _VDM0CN         DATA 0xff
0000            268   _WDTCN          DATA 0x97
0000            269   _XBR0           DATA 0xe1
0000            270   _XBR1           DATA 0xe2
0000            271   _XBR2           DATA 0xe3
0000            272   _XOSC0CN        DATA 0x86
0000            273   _DPTR           DATA 0x8382
0000            274   _TMR2RL         DATA 0xcbca
0000            275   _TMR3RL         DATA 0x9392
0000            276   _TMR4RL         DATA 0xa3a2
0000            277   _TMR5RL         DATA 0xd3d2
0000            278   _TMR0           DATA 0x8c8a
0000            279   _TMR1           DATA 0x8d8b
0000            280   _TMR2           DATA 0xcfce
0000            281   _TMR3           DATA 0x9594
0000            282   _TMR4           DATA 0xa5a4
0000            283   _TMR5           DATA 0xd5d4
0000            284   _SBRL1          DATA 0x9695
0000            285   _PCA0           DATA 0xfaf9
0000            286   _PCA0CP0        DATA 0xfcfb
0000            287   _PCA0CP1        DATA 0xeae9
0000            288   _PCA0CP2        DATA 0xeceb
0000            289   _PCA0CP3        DATA 0xf5f4
0000            290   _PCA0CP4        DATA 0x8584
0000            291   _PCA0CP5        DATA 0xdedd
0000            292   _ADC0ASA        DATA 0xb6b5
0000            293   _ADC0GT         DATA 0xc4c3
0000            294   _ADC0           DATA 0xbebd
0000            295   _ADC0LT         DATA 0xc6c5
0000            296   _DAC0           DATA 0x8584
0000            297   _DAC1           DATA 0x8a89
0000            298   _DAC2           DATA 0x8c8b
0000            299   _DAC3           DATA 0x8e8d
0000            300   ;--------------------------------------------------------
0000            301   ; special function bits
0000            302   ;--------------------------------------------------------
0000            303   _ACC_0          BIT 0xe0
0000            304   _ACC_1          BIT 0xe1
0000            305   _ACC_2          BIT 0xe2
0000            306   _ACC_3          BIT 0xe3
0000            307   _ACC_4          BIT 0xe4
0000            308   _ACC_5          BIT 0xe5
0000            309   _ACC_6          BIT 0xe6
0000            310   _ACC_7          BIT 0xe7
0000            311   _TEMPE          BIT 0xe8
0000            312   _ADGN0          BIT 0xe9
0000            313   _ADGN1          BIT 0xea
0000            314   _ADWINT         BIT 0xeb
0000            315   _ADBUSY         BIT 0xec
0000            316   _ADINT          BIT 0xed
0000            317   _IPOEN          BIT 0xee
0000            318   _ADEN           BIT 0xef
0000            319   _B_0            BIT 0xf0
0000            320   _B_1            BIT 0xf1
0000            321   _B_2            BIT 0xf2
0000            322   _B_3            BIT 0xf3
0000            323   _B_4            BIT 0xf4
0000            324   _B_5            BIT 0xf5
0000            325   _B_6            BIT 0xf6
0000            326   _B_7            BIT 0xf7
0000            327   _C0FIF          BIT 0xe8
0000            328   _C0RIF          BIT 0xe9
0000            329   _C1FIF          BIT 0xea
0000            330   _C1RIF          BIT 0xeb
0000            331   _C2FIF          BIT 0xec
0000            332   _C2RIF          BIT 0xed
0000            333   _C3FIF          BIT 0xee
0000            334   _C3RIF          BIT 0xef
0000            335   _D1SRC0         BIT 0x88
0000            336   _D1SRC1         BIT 0x89
0000            337   _D1AMEN         BIT 0x8a
0000            338   _D01REFSL       BIT 0x8b
0000            339   _D3SRC0         BIT 0x8c
0000            340   _D3SRC1         BIT 0x8d
0000            341   _D3AMEN         BIT 0x8e
0000            342   _D23REFSL       BIT 0x8f
0000            343   _D0UDIS         BIT 0x98
0000            344   _D1UDIS         BIT 0x99
0000            345   _D2UDIS         BIT 0x9a
0000            346   _D3UDIS         BIT 0x9b
0000            347   _EX0            BIT 0xa8
0000            348   _ET0            BIT 0xa9
0000            349   _EX1            BIT 0xaa
0000            350   _ET1            BIT 0xab
0000            351   _ES0            BIT 0xac
0000            352   _ET2            BIT 0xad
0000            353   _ESPI0          BIT 0xae
0000            354   _EA             BIT 0xaf
0000            355   _PX0            BIT 0xb8
0000            356   _PT0            BIT 0xb9
0000            357   _PX1            BIT 0xba
0000            358   _PT1            BIT 0xbb
0000            359   _PS0            BIT 0xbc
0000            360   _PT2            BIT 0xbd
0000            361   _PSPI0          BIT 0xbe
0000            362   _P0_0           BIT 0x80
0000            363   _P0_1           BIT 0x81
0000            364   _P0_2           BIT 0x82
0000            365   _P0_3           BIT 0x83
0000            366   _P0_4           BIT 0x84
0000            367   _P0_5           BIT 0x85
0000            368   _P0_6           BIT 0x86
0000            369   _P0_7           BIT 0x87
0000            370   _P1_0           BIT 0x90
0000            371   _P1_1           BIT 0x91
0000            372   _P1_2           BIT 0x92
0000            373   _P1_3           BIT 0x93
0000            374   _P1_4           BIT 0x94
0000            375   _P1_5           BIT 0x95
0000            376   _P1_6           BIT 0x96
0000            377   _P1_7           BIT 0x97
0000            378   _P2_0           BIT 0xa0
0000            379   _P2_1           BIT 0xa1
0000            380   _P2_2           BIT 0xa2
0000            381   _P2_3           BIT 0xa3
0000            382   _P2_4           BIT 0xa4
0000            383   _P2_5           BIT 0xa5
0000            384   _P2_6           BIT 0xa6
0000            385   _P3_0           BIT 0xb0
0000            386   _P3_1           BIT 0xb1
0000            387   _P3_2           BIT 0xb2
0000            388   _P3_3           BIT 0xb3
0000            389   _P3_4           BIT 0xb4
0000            390   _P3_7           BIT 0xb7
0000            391   _CCF0           BIT 0xd8
0000            392   _CCF1           BIT 0xd9
0000            393   _CCF2           BIT 0xda
0000            394   _CCF3           BIT 0xdb
0000            395   _CCF4           BIT 0xdc
0000            396   _CCF5           BIT 0xdd
0000            397   _CR             BIT 0xde
0000            398   _CF             BIT 0xdf
0000            399   _PARITY         BIT 0xd0
0000            400   _F1             BIT 0xd1
0000            401   _OV             BIT 0xd2
0000            402   _RS0            BIT 0xd3
0000            403   _RS1            BIT 0xd4
0000            404   _F0             BIT 0xd5
0000            405   _AC             BIT 0xd6
0000            406   _CY             BIT 0xd7
0000            407   _RI             BIT 0x98
0000            408   _TI             BIT 0x99
0000            409   _RB8            BIT 0x9a
0000            410   _TB8            BIT 0x9b
0000            411   _REN            BIT 0x9c
0000            412   _CE             BIT 0x9d
0000            413   _SMODE          BIT 0x9e
0000            414   _RI1            BIT 0xc8
0000            415   _TI1            BIT 0xc9
0000            416   _RBX1           BIT 0xca
0000            417   _TBX1           BIT 0xcb
0000            418   _REN1           BIT 0xcc
0000            419   _PERR1          BIT 0xcd
0000            420   _OVR1           BIT 0xce
0000            421   _SI             BIT 0xc0
0000            422   _ACK            BIT 0xc1
0000            423   _ARBLOST        BIT 0xc2
0000            424   _ACKRQ          BIT 0xc3
0000            425   _STO            BIT 0xc4
0000            426   _STA            BIT 0xc5
0000            427   _TXMODE         BIT 0xc6
0000            428   _MASTER         BIT 0xc7
0000            429   _SPIEN          BIT 0xf8
0000            430   _TXNF           BIT 0xf9
0000            431   _NSSMD0         BIT 0xfa
0000            432   _NSSMD1         BIT 0xfb
0000            433   _RXOVRN         BIT 0xfc
0000            434   _MODF           BIT 0xfd
0000            435   _WCOL           BIT 0xfe
0000            436   _SPIF           BIT 0xff
0000            437   _IT0            BIT 0x88
0000            438   _IE0            BIT 0x89
0000            439   _IT1            BIT 0x8a
0000            440   _IE1            BIT 0x8b
0000            441   _TR0            BIT 0x8c
0000            442   _TF0            BIT 0x8d
0000            443   _TR1            BIT 0x8e
0000            444   _TF1            BIT 0x8f
0000            445   _T2XCLK0        BIT 0xc8
0000            446   _T2XCLK1        BIT 0xc9
0000            447   _TR2            BIT 0xca
0000            448   _T2SPLIT        BIT 0xcb
0000            449   _TF2CEN         BIT 0xcc
0000            450   _TF2LEN         BIT 0xcd
0000            451   _TF2L           BIT 0xce
0000            452   _TF2H           BIT 0xcf
0000            453   _T4XCLK0        BIT 0x98
0000            454   _T4XCLK1        BIT 0x99
0000            455   _TR4            BIT 0x9a
0000            456   _T4SPLIT        BIT 0x9b
0000            457   _TF4CEN         BIT 0x9c
0000            458   _TF4LEN         BIT 0x9d
0000            459   _TF4L           BIT 0x9e
0000            460   _TF4H           BIT 0x9f
0000            461   _T5XCLK0        BIT 0xc0
0000            462   _T5XCLK1        BIT 0xc1
0000            463   _TR5            BIT 0xc2
0000            464   _T5SPLIT        BIT 0xc3
0000            465   _TF5CEN         BIT 0xc4
0000            466   _TF5LEN         BIT 0xc5
0000            467   _TF5L           BIT 0xc6
0000            468   _TF5H           BIT 0xc7
0000            469   _RIE            BIT 0xd8
0000            470   _RXTO0          BIT 0xd9
0000            471   _RXTO1          BIT 0xda
0000            472   _RFRQ           BIT 0xdb
0000            473   _TIE            BIT 0xdc
0000            474   _TXHOLD         BIT 0xdd
0000            475   _TXNF1          BIT 0xde
0000            476   _TFRQ           BIT 0xdf
0000            477   ;--------------------------------------------------------
0000            478   ; overlayable register banks
0000            479   ;--------------------------------------------------------
0000            480            rbank0 segment data overlay
0000            481   ;--------------------------------------------------------
0000            482   ; internal ram data
0000            483   ;--------------------------------------------------------
0000            484            rseg R_DSEG
0000            485   _main_v_1_61:
0000            486            ds 16
0010            487   _main_norm_x_1_61:
0010            488            ds 4
0014            489   _main_sloc0_1_0:
0014            490            ds 4
0018            491   ;--------------------------------------------------------
0018            492   ; overlayable items in internal ram 
0018            493   ;--------------------------------------------------------
0000            494            rseg    R_OSEG
0000            495            rseg    R_OSEG
0000            496   _InitPinADC_PARM_2:
0000            497            ds 1
0001            498            rseg    R_OSEG
0001            499   ;--------------------------------------------------------
0001            500   ; indirectly addressable internal ram data
0001            501   ;--------------------------------------------------------
0000            502            rseg R_ISEG
0000            503   ;--------------------------------------------------------
0000            504   ; absolute internal ram data
0000            505   ;--------------------------------------------------------
0000            506            DSEG
0000            507   ;--------------------------------------------------------
0000            508   ; bit data
0000            509   ;--------------------------------------------------------
0000            510            rseg R_BSEG
0000            511   _main_button_state_1_61:
0000            512            DBIT    1
0001            513   ;--------------------------------------------------------
0001            514   ; paged external ram data
0001            515   ;--------------------------------------------------------
0000            516            rseg R_PSEG
0000            517   ;--------------------------------------------------------
0000            518   ; external ram data
0000            519   ;--------------------------------------------------------
0000            520            rseg R_XSEG
0000            521   ;--------------------------------------------------------
0000            522   ; absolute external ram data
0000            523   ;--------------------------------------------------------
0000            524            XSEG
0000            525   ;--------------------------------------------------------
0000            526   ; external initialized ram data
0000            527   ;--------------------------------------------------------
0000            528            rseg R_IXSEG
0000            529            rseg R_HOME
0000            530            rseg R_GSINIT
0000            531            rseg R_CSEG
0000            532   ;--------------------------------------------------------
0000            533   ; Reset entry point and interrupt vectors
0000            534   ;--------------------------------------------------------
0000            535            CSEG at 0x0000
0000 020000     536            ljmp    _crt0
0003            537   ;--------------------------------------------------------
0003            538   ; global & static initialisations
0003            539   ;--------------------------------------------------------
0000            540            rseg R_HOME
0000            541            rseg R_GSINIT
0000            542            rseg R_GSINIT
0000            543   ;--------------------------------------------------------
0000            544   ; data variables initialization
0000            545   ;--------------------------------------------------------
0000            546            rseg R_DINIT
0000            547            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            548   ;--------------------------------------------------------
0000            549   ; code
0000            550   ;--------------------------------------------------------
0000            551            rseg R_CSEG
0000            552   ;------------------------------------------------------------
0000            553   ;Allocation info for local variables in function '_c51_external_startup'
0000            554   ;------------------------------------------------------------
0000            555   ;------------------------------------------------------------
0000            556   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:17: char _c51_external_startup (void)
0000            557   ;        -----------------------------------------
0000            558   ;         function _c51_external_startup
0000            559   ;        -----------------------------------------
0000            560   __c51_external_startup:
0000            561            using   0
0000            562   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:20: SFRPAGE = 0x00;
0000 75A700     563            mov     _SFRPAGE,#0x00
0003            564   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:21: WDTCN = 0xDE; //First key
0003 7597DE     565            mov     _WDTCN,#0xDE
0006            566   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:22: WDTCN = 0xAD; //Second key
0006 7597AD     567            mov     _WDTCN,#0xAD
0009            568   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:24: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     569            mov     _VDM0CN,#0x80
000C            570   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:25: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     571            mov     _RSTSRC,#0x06
000F            572   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:32: SFRPAGE = 0x10;
000F 75A710     573            mov     _SFRPAGE,#0x10
0012            574   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:33: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     575            mov     _PFE0CN,#0x20
0015            576   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:34: SFRPAGE = 0x00;
0015 75A700     577            mov     _SFRPAGE,#0x00
0018            578   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:55: CLKSEL = 0x00;
0018 75A900     579            mov     _CLKSEL,#0x00
001B            580   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:56: CLKSEL = 0x00;
001B 75A900     581            mov     _CLKSEL,#0x00
001E            582   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:57: while ((CLKSEL & 0x80) == 0);
001E            583   L002001?:
001E E5A9       584            mov     a,_CLKSEL
0020 30E788     585            jnb     acc.7,L002001?
0023            586   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:58: CLKSEL = 0x03;
0023 75A903     587            mov     _CLKSEL,#0x03
0026            588   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:59: CLKSEL = 0x03;
0026 75A903     589            mov     _CLKSEL,#0x03
0029            590   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:60: while ((CLKSEL & 0x80) == 0);
0029            591   L002004?:
0029 E5A9       592            mov     a,_CLKSEL
002B 30E708     593            jnb     acc.7,L002004?
002E            594   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:65: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
002E 43A410     595            orl     _P0MDOUT,#0x10
0031            596   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:66: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0031 75E101     597            mov     _XBR0,#0x01
0034            598   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:67: XBR1     = 0X00;
0034 75E200     599            mov     _XBR1,#0x00
0037            600   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:68: XBR2     = 0x40; // Enable crossbar and weak pull-ups
0037 75E340     601            mov     _XBR2,#0x40
003A            602   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:74: SCON0 = 0x10;
003A 759810     603            mov     _SCON0,#0x10
003D            604   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:75: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
003D 758DE6     605            mov     _TH1,#0xE6
0040            606   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:76: TL1 = TH1;      // Init Timer1
0040 858D8B     607            mov     _TL1,_TH1
0043            608   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:77: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0043 53890F     609            anl     _TMOD,#0x0F
0046            610   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:78: TMOD |=  0x20;                       
0046 438920     611            orl     _TMOD,#0x20
0049            612   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:79: TR1 = 1; // START Timer1
0049 D28E       613            setb    _TR1
004B            614   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:80: TI = 1;  // Indicate TX0 ready
004B D299       615            setb    _TI
004D            616   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:82: return 0;
004D 758200     617            mov     dpl,#0x00
0050 22         618            ret
0051            619   ;------------------------------------------------------------
0051            620   ;Allocation info for local variables in function 'InitADC'
0051            621   ;------------------------------------------------------------
0051            622   ;------------------------------------------------------------
0051            623   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:85: void InitADC (void)
0051            624   ;        -----------------------------------------
0051            625   ;         function InitADC
0051            626   ;        -----------------------------------------
0051            627   _InitADC:
0051            628   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:87: SFRPAGE = 0x00;
0051 75A700     629            mov     _SFRPAGE,#0x00
0054            630   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:88: ADEN=0; // Disable ADC
0054 C2EF       631            clr     _ADEN
0056            632   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:93: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0056 75B280     633            mov     _ADC0CN1,#0x80
0059            634   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:97: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
0059 75BC20     635            mov     _ADC0CF0,#0x20
005C            636   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:101: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
005C 75B91E     637            mov     _ADC0CF1,#0x1E
005F            638   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:110: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
005F 75E800     639            mov     _ADC0CN0,#0x00
0062            640   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:115: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0062 75DF3F     641            mov     _ADC0CF2,#0x3F
0065            642   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:119: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0065 75B300     643            mov     _ADC0CN2,#0x00
0068            644   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:121: ADEN=1; // Enable ADC
0068 D2EF       645            setb    _ADEN
006A 22         646            ret
006B            647   ;------------------------------------------------------------
006B            648   ;Allocation info for local variables in function 'Timer3us'
006B            649   ;------------------------------------------------------------
006B            650   ;us                        Allocated to registers r2 
006B            651   ;i                         Allocated to registers r3 
006B            652   ;------------------------------------------------------------
006B            653   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:125: void Timer3us(unsigned char us)
006B            654   ;        -----------------------------------------
006B            655   ;         function Timer3us
006B            656   ;        -----------------------------------------
006B            657   _Timer3us:
006B AA82       658            mov     r2,dpl
006D            659   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:130: CKCON0|=0b_0100_0000;
006D 438E40     660            orl     _CKCON0,#0x40
0070            661   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:132: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0070 7592B8     662            mov     _TMR3RL,#0xB8
0073 7593FF     663            mov     (_TMR3RL >> 8),#0xFF
0076            664   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:133: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0076 859294     665            mov     _TMR3,_TMR3RL
0079 859395     666            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007C            667   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:135: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007C 759104     668            mov     _TMR3CN0,#0x04
007F            669   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:136: for (i = 0; i < us; i++)       // Count <us> overflows
007F 7B00       670            mov     r3,#0x00
0081            671   L004004?:
0081 C3         672            clr     c
0082 EB         673            mov     a,r3
0083 9A         674            subb    a,r2
0084 5000       675            jnc     L004007?
0086            676   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:138: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0086            677   L004001?:
0086 E591       678            mov     a,_TMR3CN0
0088 30E708     679            jnb     acc.7,L004001?
008B            680   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:139: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008B 53917F     681            anl     _TMR3CN0,#0x7F
008E            682   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:136: for (i = 0; i < us; i++)       // Count <us> overflows
008E 0B         683            inc     r3
008F 8000       684            sjmp    L004004?
0091            685   L004007?:
0091            686   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:141: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0091 759100     687            mov     _TMR3CN0,#0x00
0094 22         688            ret
0095            689   ;------------------------------------------------------------
0095            690   ;Allocation info for local variables in function 'waitms'
0095            691   ;------------------------------------------------------------
0095            692   ;ms                        Allocated to registers r2 r3 
0095            693   ;j                         Allocated to registers r4 r5 
0095            694   ;k                         Allocated to registers r6 
0095            695   ;------------------------------------------------------------
0095            696   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:144: void waitms (unsigned int ms)
0095            697   ;        -----------------------------------------
0095            698   ;         function waitms
0095            699   ;        -----------------------------------------
0095            700   _waitms:
0095 AA82       701            mov     r2,dpl
0097 AB83       702            mov     r3,dph
0099            703   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:148: for(j=0; j<ms; j++)
0099 7C00       704            mov     r4,#0x00
009B 7D00       705            mov     r5,#0x00
009D            706   L005005?:
009D C3         707            clr     c
009E EC         708            mov     a,r4
009F 9A         709            subb    a,r2
00A0 ED         710            mov     a,r5
00A1 9B         711            subb    a,r3
00A2 5000       712            jnc     L005009?
00A4            713   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:149: for (k=0; k<4; k++) Timer3us(250);
00A4 7E00       714            mov     r6,#0x00
00A6            715   L005001?:
00A6 BE0448     716            cjne    r6,#0x04,L005018?
00A9            717   L005018?:
00A9 5000       718            jnc     L005007?
00AB 7582FA     719            mov     dpl,#0xFA
00AE C002       720            push    ar2
00B0 C003       721            push    ar3
00B2 C004       722            push    ar4
00B4 C005       723            push    ar5
00B6 C006       724            push    ar6
00B8 120000     725            lcall   _Timer3us
00BB D006       726            pop     ar6
00BD D005       727            pop     ar5
00BF D004       728            pop     ar4
00C1 D003       729            pop     ar3
00C3 D002       730            pop     ar2
00C5 0E         731            inc     r6
00C6 8000       732            sjmp    L005001?
00C8            733   L005007?:
00C8            734   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:148: for(j=0; j<ms; j++)
00C8 0C         735            inc     r4
00C9 BC0088     736            cjne    r4,#0x00,L005005?
00CC 0D         737            inc     r5
00CD 8000       738            sjmp    L005005?
00CF            739   L005009?:
00CF 22         740            ret
00D0            741   ;------------------------------------------------------------
00D0            742   ;Allocation info for local variables in function 'InitPinADC'
00D0            743   ;------------------------------------------------------------
00D0            744   ;pin_num                   Allocated with name '_InitPinADC_PARM_2'
00D0            745   ;portno                    Allocated to registers r2 
00D0            746   ;mask                      Allocated to registers r3 
00D0            747   ;------------------------------------------------------------
00D0            748   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:154: void InitPinADC (unsigned char portno, unsigned char pin_num)
00D0            749   ;        -----------------------------------------
00D0            750   ;         function InitPinADC
00D0            751   ;        -----------------------------------------
00D0            752   _InitPinADC:
00D0 AA82       753            mov     r2,dpl
00D2            754   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:158: mask=1<<pin_num;
00D2 85D8F0     755            mov     b,_InitPinADC_PARM_2
00D5 05F0       756            inc     b
00D7 7401       757            mov     a,#0x01
00D9 8000       758            sjmp    L006013?
00DB            759   L006011?:
00DB 25E0       760            add     a,acc
00DD            761   L006013?:
00DD D5F048     762            djnz    b,L006011?
00E0 FB         763            mov     r3,a
00E1            764   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:160: SFRPAGE = 0x20;
00E1 75A720     765            mov     _SFRPAGE,#0x20
00E4            766   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:161: switch (portno)
00E4 BA0088     767            cjne    r2,#0x00,L006014?
00E7 8000       768            sjmp    L006001?
00E9            769   L006014?:
00E9 BA0108     770            cjne    r2,#0x01,L006015?
00EC 8000       771            sjmp    L006002?
00EE            772   L006015?:
00EE            773   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:163: case 0:
00EE BA0288     774            cjne    r2,#0x02,L006005?
00F1 8000       775            sjmp    L006003?
00F3            776   L006001?:
00F3            777   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:164: P0MDIN &= (~mask); // Set pin as analog input
00F3 EB         778            mov     a,r3
00F4 F4         779            cpl     a
00F5 FA         780            mov     r2,a
00F6 52F1       781            anl     _P0MDIN,a
00F8            782   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:165: P0SKIP |= mask; // Skip Crossbar decoding for this pin
00F8 EB         783            mov     a,r3
00F9 42D4       784            orl     _P0SKIP,a
00FB            785   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:166: break;
00FB            786   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:167: case 1:
00FB 8000       787            sjmp    L006005?
00FD            788   L006002?:
00FD            789   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:168: P1MDIN &= (~mask); // Set pin as analog input
00FD EB         790            mov     a,r3
00FE F4         791            cpl     a
00FF FA         792            mov     r2,a
0100 52F2       793            anl     _P1MDIN,a
0102            794   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:169: P1SKIP |= mask; // Skip Crossbar decoding for this pin
0102 EB         795            mov     a,r3
0103 42D5       796            orl     _P1SKIP,a
0105            797   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:170: break;
0105            798   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:171: case 2:
0105 8000       799            sjmp    L006005?
0107            800   L006003?:
0107            801   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:172: P2MDIN &= (~mask); // Set pin as analog input
0107 EB         802            mov     a,r3
0108 F4         803            cpl     a
0109 FA         804            mov     r2,a
010A 52F3       805            anl     _P2MDIN,a
010C            806   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:173: P2SKIP |= mask; // Skip Crossbar decoding for this pin
010C EB         807            mov     a,r3
010D 42CC       808            orl     _P2SKIP,a
010F            809   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:177: }
010F            810   L006005?:
010F            811   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:178: SFRPAGE = 0x00;
010F 75A700     812            mov     _SFRPAGE,#0x00
0112 22         813            ret
0113            814   ;------------------------------------------------------------
0113            815   ;Allocation info for local variables in function 'ADC_at_Pin'
0113            816   ;------------------------------------------------------------
0113            817   ;pin                       Allocated to registers 
0113            818   ;------------------------------------------------------------
0113            819   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:181: unsigned int ADC_at_Pin(unsigned char pin)
0113            820   ;        -----------------------------------------
0113            821   ;         function ADC_at_Pin
0113            822   ;        -----------------------------------------
0113            823   _ADC_at_Pin:
0113 8582BB     824            mov     _ADC0MX,dpl
0116            825   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:184: ADINT = 0;
0116 C2ED       826            clr     _ADINT
0118            827   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:185: ADBUSY = 1;     // Convert voltage at the pin
0118 D2EC       828            setb    _ADBUSY
011A            829   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:186: while (!ADINT); // Wait for conversion to complete
011A            830   L007001?:
011A 30ED08     831            jnb     _ADINT,L007001?
011D            832   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:187: return (ADC0);
011D 85BD82     833            mov     dpl,_ADC0
0120 85BE83     834            mov     dph,(_ADC0 >> 8)
0123 22         835            ret
0124            836   ;------------------------------------------------------------
0124            837   ;Allocation info for local variables in function 'Volts_at_Pin'
0124            838   ;------------------------------------------------------------
0124            839   ;pin                       Allocated to registers r2 
0124            840   ;------------------------------------------------------------
0124            841   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:190: float Volts_at_Pin(unsigned char pin)
0124            842   ;        -----------------------------------------
0124            843   ;         function Volts_at_Pin
0124            844   ;        -----------------------------------------
0124            845   _Volts_at_Pin:
0124            846   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:192: return ((ADC_at_Pin(pin)*VDD)/16383.0);
0124 120000     847            lcall   _ADC_at_Pin
0127 120000     848            lcall   ___uint2fs
012A AA82       849            mov     r2,dpl
012C AB83       850            mov     r3,dph
012E ACF0       851            mov     r4,b
0130 FD         852            mov     r5,a
0131 C002       853            push    ar2
0133 C003       854            push    ar3
0135 C004       855            push    ar4
0137 C005       856            push    ar5
0139 903333     857            mov     dptr,#0x3333
013C 75F053     858            mov     b,#0x53
013F 7440       859            mov     a,#0x40
0141 120000     860            lcall   ___fsmul
0144 AA82       861            mov     r2,dpl
0146 AB83       862            mov     r3,dph
0148 ACF0       863            mov     r4,b
014A FD         864            mov     r5,a
014B E581       865            mov     a,sp
014D 24FC       866            add     a,#0xfc
014F F581       867            mov     sp,a
0151 E4         868            clr     a
0152 C0E0       869            push    acc
0154 74FC       870            mov     a,#0xFC
0156 C0E0       871            push    acc
0158 747F       872            mov     a,#0x7F
015A C0E0       873            push    acc
015C 7446       874            mov     a,#0x46
015E C0E0       875            push    acc
0160 8A82       876            mov     dpl,r2
0162 8B83       877            mov     dph,r3
0164 8CF0       878            mov     b,r4
0166 ED         879            mov     a,r5
0167 120000     880            lcall   ___fsdiv
016A AA82       881            mov     r2,dpl
016C AB83       882            mov     r3,dph
016E ACF0       883            mov     r4,b
0170 FD         884            mov     r5,a
0171 E581       885            mov     a,sp
0173 24FC       886            add     a,#0xfc
0175 F581       887            mov     sp,a
0177 8A82       888            mov     dpl,r2
0179 8B83       889            mov     dph,r3
017B 8CF0       890            mov     b,r4
017D ED         891            mov     a,r5
017E 22         892            ret
017F            893   ;------------------------------------------------------------
017F            894   ;Allocation info for local variables in function 'InitPushButton'
017F            895   ;------------------------------------------------------------
017F            896   ;------------------------------------------------------------
017F            897   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:195: void InitPushButton(void)
017F            898   ;        -----------------------------------------
017F            899   ;         function InitPushButton
017F            900   ;        -----------------------------------------
017F            901   _InitPushButton:
017F            902   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:197: SFRPAGE = 0x20;  // Switch to Port Configuration Page
017F 75A720     903            mov     _SFRPAGE,#0x20
0182            904   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:198: P3MDOUT &= ~(1 << 2); // Set P3.2 as open-drain (input mode)
0182 539CFB     905            anl     _P3MDOUT,#0xFB
0185            906   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:199: P3 |= (1 << 2);  // Enable internal pull-up resistor
0185 43B004     907            orl     _P3,#0x04
0188            908   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:200: SFRPAGE = 0x00;  // Restore SFRPAGE
0188 75A700     909            mov     _SFRPAGE,#0x00
018B 22         910            ret
018C            911   ;------------------------------------------------------------
018C            912   ;Allocation info for local variables in function 'main'
018C            913   ;------------------------------------------------------------
018C            914   ;v                         Allocated with name '_main_v_1_61'
018C            915   ;norm_x                    Allocated with name '_main_norm_x_1_61'
018C            916   ;norm_y                    Allocated to registers r2 r3 r4 r5 
018C            917   ;sloc0                     Allocated with name '_main_sloc0_1_0'
018C            918   ;------------------------------------------------------------
018C            919   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:203: void main (void)
018C            920   ;        -----------------------------------------
018C            921   ;         function main
018C            922   ;        -----------------------------------------
018C            923   _main:
018C            924   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:211: waitms(500); // Give PuTTy a chance to start before sending
018C 9001F4     925            mov     dptr,#0x01F4
018F 120000     926            lcall   _waitms
0192            927   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:212: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
0192 7448       928            mov     a,#__str_0
0194 C0E0       929            push    acc
0196 74B8       930            mov     a,#(__str_0 >> 8)
0198 C0E0       931            push    acc
019A 7480       932            mov     a,#0x80
019C C0E0       933            push    acc
019E 120000     934            lcall   _printf
01A1 1581       935            dec     sp
01A3 1581       936            dec     sp
01A5 1581       937            dec     sp
01A7            938   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:217: __FILE__, __DATE__, __TIME__);
01A7            939   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:216: "Compiled: %s, %s\n\n",
01A7 74C8       940            mov     a,#__str_4
01A9 C0E0       941            push    acc
01AB 74B8       942            mov     a,#(__str_4 >> 8)
01AD C0E0       943            push    acc
01AF 7480       944            mov     a,#0x80
01B1 C0E0       945            push    acc
01B3 7408       946            mov     a,#__str_3
01B5 C0E0       947            push    acc
01B7 74B9       948            mov     a,#(__str_3 >> 8)
01B9 C0E0       949            push    acc
01BB 7480       950            mov     a,#0x80
01BD C0E0       951            push    acc
01BF 7448       952            mov     a,#__str_2
01C1 C0E0       953            push    acc
01C3 74B9       954            mov     a,#(__str_2 >> 8)
01C5 C0E0       955            push    acc
01C7 7480       956            mov     a,#0x80
01C9 C0E0       957            push    acc
01CB 7488       958            mov     a,#__str_1
01CD C0E0       959            push    acc
01CF 74B9       960            mov     a,#(__str_1 >> 8)
01D1 C0E0       961            push    acc
01D3 7480       962            mov     a,#0x80
01D5 C0E0       963            push    acc
01D7 120000     964            lcall   _printf
01DA E581       965            mov     a,sp
01DC 24F4       966            add     a,#0xf4
01DE F581       967            mov     sp,a
01E0            968   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:219: InitPinADC(2, 2); // Configure P2.2 as analog input
01E0 75D802     969            mov     _InitPinADC_PARM_2,#0x02
01E3 758202     970            mov     dpl,#0x02
01E6 120000     971            lcall   _InitPinADC
01E9            972   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:220: InitPinADC(2, 3); // Configure P2.3 as analog input
01E9 75D803     973            mov     _InitPinADC_PARM_2,#0x03
01EC 758202     974            mov     dpl,#0x02
01EF 120000     975            lcall   _InitPinADC
01F2            976   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:221: InitPinADC(2, 4); // Configure P2.4 as analog input
01F2 75D804     977            mov     _InitPinADC_PARM_2,#0x04
01F5 758202     978            mov     dpl,#0x02
01F8 120000     979            lcall   _InitPinADC
01FB            980   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:222: InitPinADC(2, 5); // Configure P2.5 as analog input
01FB 75D805     981            mov     _InitPinADC_PARM_2,#0x05
01FE 758202     982            mov     dpl,#0x02
0201 120000     983            lcall   _InitPinADC
0204            984   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:223: InitADC();
0204 120000     985            lcall   _InitADC
0207            986   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:224: InitPushButton();
0207 120000     987            lcall   _InitPushButton
020A            988   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:226: while(1)
020A            989   L010002?:
020A            990   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:229: v[0] = Volts_at_Pin(QFP32_MUX_P2_2);
020A 75820F     991            mov     dpl,#0x0F
020D 120000     992            lcall   _Volts_at_Pin
0210 AA82       993            mov     r2,dpl
0212 AB83       994            mov     r3,dph
0214 ACF0       995            mov     r4,b
0216 FD         996            mov     r5,a
0217 8A28       997            mov     _main_v_1_61,r2
0219 8B29       998            mov     (_main_v_1_61 + 1),r3
021B 8C2A       999            mov     (_main_v_1_61 + 2),r4
021D 8D2B      1000            mov     (_main_v_1_61 + 3),r5
021F           1001   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:230: v[1] = Volts_at_Pin(QFP32_MUX_P2_3);
021F 758210    1002            mov     dpl,#0x10
0222 120000    1003            lcall   _Volts_at_Pin
0225 AA82      1004            mov     r2,dpl
0227 AB83      1005            mov     r3,dph
0229 ACF0      1006            mov     r4,b
022B FD        1007            mov     r5,a
022C 8A2C      1008            mov     (_main_v_1_61 + 0x0004),r2
022E 8B2D      1009            mov     ((_main_v_1_61 + 0x0004) + 1),r3
0230 8C2E      1010            mov     ((_main_v_1_61 + 0x0004) + 2),r4
0232 8D2F      1011            mov     ((_main_v_1_61 + 0x0004) + 3),r5
0234           1012   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:231: v[2] = Volts_at_Pin(QFP32_MUX_P2_4);
0234 758211    1013            mov     dpl,#0x11
0237 120000    1014            lcall   _Volts_at_Pin
023A AA82      1015            mov     r2,dpl
023C AB83      1016            mov     r3,dph
023E ACF0      1017            mov     r4,b
0240 FD        1018            mov     r5,a
0241 8A30      1019            mov     (_main_v_1_61 + 0x0008),r2
0243 8B31      1020            mov     ((_main_v_1_61 + 0x0008) + 1),r3
0245 8C32      1021            mov     ((_main_v_1_61 + 0x0008) + 2),r4
0247 8D33      1022            mov     ((_main_v_1_61 + 0x0008) + 3),r5
0249           1023   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:232: v[3] = Volts_at_Pin(QFP32_MUX_P2_5);
0249 758212    1024            mov     dpl,#0x12
024C 120000    1025            lcall   _Volts_at_Pin
024F 8582B8    1026            mov     _main_sloc0_1_0,dpl
0252 8583B9    1027            mov     (_main_sloc0_1_0 + 1),dph
0255 85F0BA    1028            mov     (_main_sloc0_1_0 + 2),b
0258 F5BB      1029            mov     (_main_sloc0_1_0 + 3),a
025A 85B834    1030            mov     (_main_v_1_61 + 0x000c),_main_sloc0_1_0
025D 85B935    1031            mov     ((_main_v_1_61 + 0x000c) + 1),(_main_sloc0_1_0 + 1)
0260 85BA36    1032            mov     ((_main_v_1_61 + 0x000c) + 2),(_main_sloc0_1_0 + 2)
0263 85BB37    1033            mov     ((_main_v_1_61 + 0x000c) + 3),(_main_sloc0_1_0 + 3)
0266           1034   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:234: norm_x = (v[1] / 3.29) * 2.0 - 1.0;  // Horizontal (P2.3)
0266 745C      1035            mov     a,#0x5C
0268 C0E0      1036            push    acc
026A 748F      1037            mov     a,#0x8F
026C C0E0      1038            push    acc
026E 7452      1039            mov     a,#0x52
0270 C0E0      1040            push    acc
0272 7440      1041            mov     a,#0x40
0274 C0E0      1042            push    acc
0276 852C82    1043            mov     dpl,(_main_v_1_61 + 0x0004)
0279 852D83    1044            mov     dph,((_main_v_1_61 + 0x0004) + 1)
027C 852EF0    1045            mov     b,((_main_v_1_61 + 0x0004) + 2)
027F E52F      1046            mov     a,((_main_v_1_61 + 0x0004) + 3)
0281 120000    1047            lcall   ___fsdiv
0284 AE82      1048            mov     r6,dpl
0286 AF83      1049            mov     r7,dph
0288 AAF0      1050            mov     r2,b
028A FB        1051            mov     r3,a
028B E581      1052            mov     a,sp
028D 24FC      1053            add     a,#0xfc
028F F581      1054            mov     sp,a
0291 C006      1055            push    ar6
0293 C007      1056            push    ar7
0295 C002      1057            push    ar2
0297 C003      1058            push    ar3
0299 900000    1059            mov     dptr,#(0x00&0x00ff)
029C E4        1060            clr     a
029D F5F0      1061            mov     b,a
029F 7440      1062            mov     a,#0x40
02A1 120000    1063            lcall   ___fsmul
02A4 AA82      1064            mov     r2,dpl
02A6 AB83      1065            mov     r3,dph
02A8 ACF0      1066            mov     r4,b
02AA FD        1067            mov     r5,a
02AB E581      1068            mov     a,sp
02AD 24FC      1069            add     a,#0xfc
02AF F581      1070            mov     sp,a
02B1 E4        1071            clr     a
02B2 C0E0      1072            push    acc
02B4 C0E0      1073            push    acc
02B6 7480      1074            mov     a,#0x80
02B8 C0E0      1075            push    acc
02BA 743F      1076            mov     a,#0x3F
02BC C0E0      1077            push    acc
02BE 8A82      1078            mov     dpl,r2
02C0 8B83      1079            mov     dph,r3
02C2 8CF0      1080            mov     b,r4
02C4 ED        1081            mov     a,r5
02C5 120000    1082            lcall   ___fssub
02C8 858278    1083            mov     _main_norm_x_1_61,dpl
02CB 858379    1084            mov     (_main_norm_x_1_61 + 1),dph
02CE 85F07A    1085            mov     (_main_norm_x_1_61 + 2),b
02D1 F57B      1086            mov     (_main_norm_x_1_61 + 3),a
02D3 E581      1087            mov     a,sp
02D5 24FC      1088            add     a,#0xfc
02D7 F581      1089            mov     sp,a
02D9           1090   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:235: norm_y = (v[0] / 3.29) * 2.0 - 1.0;  // Vertical   (P2.2)
02D9 745C      1091            mov     a,#0x5C
02DB C0E0      1092            push    acc
02DD 748F      1093            mov     a,#0x8F
02DF C0E0      1094            push    acc
02E1 7452      1095            mov     a,#0x52
02E3 C0E0      1096            push    acc
02E5 7440      1097            mov     a,#0x40
02E7 C0E0      1098            push    acc
02E9 852882    1099            mov     dpl,_main_v_1_61
02EC 852983    1100            mov     dph,(_main_v_1_61 + 1)
02EF 852AF0    1101            mov     b,(_main_v_1_61 + 2)
02F2 E52B      1102            mov     a,(_main_v_1_61 + 3)
02F4 120000    1103            lcall   ___fsdiv
02F7 AE82      1104            mov     r6,dpl
02F9 AF83      1105            mov     r7,dph
02FB AAF0      1106            mov     r2,b
02FD FB        1107            mov     r3,a
02FE E581      1108            mov     a,sp
0300 24FC      1109            add     a,#0xfc
0302 F581      1110            mov     sp,a
0304 C006      1111            push    ar6
0306 C007      1112            push    ar7
0308 C002      1113            push    ar2
030A C003      1114            push    ar3
030C 900000    1115            mov     dptr,#(0x00&0x00ff)
030F E4        1116            clr     a
0310 F5F0      1117            mov     b,a
0312 7440      1118            mov     a,#0x40
0314 120000    1119            lcall   ___fsmul
0317 AA82      1120            mov     r2,dpl
0319 AB83      1121            mov     r3,dph
031B ACF0      1122            mov     r4,b
031D FD        1123            mov     r5,a
031E E581      1124            mov     a,sp
0320 24FC      1125            add     a,#0xfc
0322 F581      1126            mov     sp,a
0324 E4        1127            clr     a
0325 C0E0      1128            push    acc
0327 C0E0      1129            push    acc
0329 7480      1130            mov     a,#0x80
032B C0E0      1131            push    acc
032D 743F      1132            mov     a,#0x3F
032F C0E0      1133            push    acc
0331 8A82      1134            mov     dpl,r2
0333 8B83      1135            mov     dph,r3
0335 8CF0      1136            mov     b,r4
0337 ED        1137            mov     a,r5
0338 120000    1138            lcall   ___fssub
033B AA82      1139            mov     r2,dpl
033D AB83      1140            mov     r3,dph
033F ACF0      1141            mov     r4,b
0341 FD        1142            mov     r5,a
0342 E581      1143            mov     a,sp
0344 24FC      1144            add     a,#0xfc
0346 F581      1145            mov     sp,a
0348           1146   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:237: button_state = (P3 & (1 << 2)) ? 0 : 1; // If HIGH, button not pressed; If LOW, button pressed
0348 E5B0      1147            mov     a,_P3
034A 03        1148            rr      a
034B 03        1149            rr      a
034C 5401      1150            anl     a,#0x01
034E FE        1151            mov     r6,a
034F B40148    1152            cjne    a,#0x01,L010007?
0352           1153   L010007?:
0352           1154   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:239: printf ("V@P2.2=%7.5fV, V@P2.3=%7.5fV, V@P2.4=%7.5fV, V@P2.5=%7.5fV, Horizontal:%7.5f, Vertical:%7.5f, ButtonState:%d\r", v[0], v[1], v[2], v[3], norm_x, norm_y, button_state);
0352 9208      1155            mov  _main_button_state_1_61,c
0354 E4        1156            clr     a
0355 33        1157            rlc     a
0356 FE        1158            mov     r6,a
0357 7F00      1159            mov     r7,#0x00
0359 C006      1160            push    ar6
035B C007      1161            push    ar7
035D C002      1162            push    ar2
035F C003      1163            push    ar3
0361 C004      1164            push    ar4
0363 C005      1165            push    ar5
0365 C078      1166            push    _main_norm_x_1_61
0367 C079      1167            push    (_main_norm_x_1_61 + 1)
0369 C07A      1168            push    (_main_norm_x_1_61 + 2)
036B C07B      1169            push    (_main_norm_x_1_61 + 3)
036D C0B8      1170            push    _main_sloc0_1_0
036F C0B9      1171            push    (_main_sloc0_1_0 + 1)
0371 C0BA      1172            push    (_main_sloc0_1_0 + 2)
0373 C0BB      1173            push    (_main_sloc0_1_0 + 3)
0375 C030      1174            push    (_main_v_1_61 + 0x0008)
0377 C031      1175            push    ((_main_v_1_61 + 0x0008) + 1)
0379 C032      1176            push    ((_main_v_1_61 + 0x0008) + 2)
037B C033      1177            push    ((_main_v_1_61 + 0x0008) + 3)
037D C02C      1178            push    (_main_v_1_61 + 0x0004)
037F C02D      1179            push    ((_main_v_1_61 + 0x0004) + 1)
0381 C02E      1180            push    ((_main_v_1_61 + 0x0004) + 2)
0383 C02F      1181            push    ((_main_v_1_61 + 0x0004) + 3)
0385 C028      1182            push    _main_v_1_61
0387 C029      1183            push    (_main_v_1_61 + 1)
0389 C02A      1184            push    (_main_v_1_61 + 2)
038B C02B      1185            push    (_main_v_1_61 + 3)
038D 7488      1186            mov     a,#__str_5
038F C0E0      1187            push    acc
0391 74BA      1188            mov     a,#(__str_5 >> 8)
0393 C0E0      1189            push    acc
0395 7480      1190            mov     a,#0x80
0397 C0E0      1191            push    acc
0399 120000    1192            lcall   _printf
039C E581      1193            mov     a,sp
039E 24E3      1194            add     a,#0xe3
03A0 F581      1195            mov     sp,a
03A2           1196   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:240: waitms(50);
03A2 900032    1197            mov     dptr,#0x0032
03A5 120000    1198            lcall   _waitms
03A8 020000    1199            ljmp    L010002?
03AB           1200            rseg R_CSEG
03AB           1201   
0000           1202            rseg R_XINIT
0000           1203   
0000           1204            rseg R_CONST
0000           1205   __str_0:
0000 1B        1206            db 0x1B
0001 5B324A    1207            db '[2J'
0004 00        1208            db 0x00
0005           1209   __str_1:
0005 41444320  1210            db 'ADC test program'
     74657374
     2070726F
     6772616D
0015 0A        1211            db 0x0A
0016 46696C65  1212            db 'File: %s'
     3A202573
001E 0A        1213            db 0x0A
001F 436F6D70  1214            db 'Compiled: %s, %s'
     696C6564
     3A202573
     2C202573
002F 0A        1215            db 0x0A
0030 0A        1216            db 0x0A
0031 00        1217            db 0x00
0032           1218   __str_2:
0032 433A      1219            db 'C:'
0034 5C        1220            db 0x5C
0035 55736572  1221            db 'Users'
     73
003A 5C        1222            db 0x5C
003B 6C656967  1223            db 'leigh'
     68
0040 5C        1224            db 0x5C
0041 456C6563  1225            db 'Elec291Project2'
     32393150
     726F6A65
     637432
0050 5C        1226            db 0x5C
0051 45464D38  1227            db 'EFM8_examples'
     5F657861
     6D706C65
     73
005E 5C        1228            db 0x5C
005F 414443    1229            db 'ADC'
0062 5C        1230            db 0x5C
0063 4144432E  1231            db 'ADC.c'
     63
0068 00        1232            db 0x00
0069           1233   __str_3:
0069 4D617220  1234            db 'Mar 21 2025'
     32312032
     303235
0074 00        1235            db 0x00
0075           1236   __str_4:
0075 31363A30  1237            db '16:01:25'
     313A3235
007D 00        1238            db 0x00
007E           1239   __str_5:
007E 56405032  1240            db 'V@P2.2=%7.5fV, V@P2.3=%7.5fV, V@P2.4=%7.5fV, V@P2.5=%7.5fV, '
     2E323D25
     372E3566
     562C2056
     4050322E
     333D2537
     2E356656
     2C205640
     50322E34
     3D25372E
     3566562C
     20564050
     322E353D
     25372E35
     66562C20
00BA 486F7269  1241            db 'Horizontal:%7.5f, Vertical:%7.5f, ButtonState:%d'
     7A6F6E74
     616C3A25
     372E3566
     2C205665
     72746963
     616C3A25
     372E3566
     2C204275
     74746F6E
     53746174
     653A2564
00EA 0D        1242            db 0x0D
00EB 00        1243            db 0x00
00EC           1244   
0003           1245            CSEG
0003           1246   
0003           1247   end
