0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Fri Mar 21 15:27:24 2025
0000              5   ;--------------------------------------------------------
                  5   $name ADC
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _Volts_at_Pin
0000             30            public _ADC_at_Pin
0000             31            public _InitPinADC
0000             32            public _waitms
0000             33            public _Timer3us
0000             34            public _InitADC
0000             35            public __c51_external_startup
0000             36   ;--------------------------------------------------------
0000             37   ; Special Function Registers
0000             38   ;--------------------------------------------------------
0000             39   _ACC            DATA 0xe0
0000             40   _ADC0ASAH       DATA 0xb6
0000             41   _ADC0ASAL       DATA 0xb5
0000             42   _ADC0ASCF       DATA 0xa1
0000             43   _ADC0ASCT       DATA 0xc7
0000             44   _ADC0CF0        DATA 0xbc
0000             45   _ADC0CF1        DATA 0xb9
0000             46   _ADC0CF2        DATA 0xdf
0000             47   _ADC0CN0        DATA 0xe8
0000             48   _ADC0CN1        DATA 0xb2
0000             49   _ADC0CN2        DATA 0xb3
0000             50   _ADC0GTH        DATA 0xc4
0000             51   _ADC0GTL        DATA 0xc3
0000             52   _ADC0H          DATA 0xbe
0000             53   _ADC0L          DATA 0xbd
0000             54   _ADC0LTH        DATA 0xc6
0000             55   _ADC0LTL        DATA 0xc5
0000             56   _ADC0MX         DATA 0xbb
0000             57   _B              DATA 0xf0
0000             58   _CKCON0         DATA 0x8e
0000             59   _CKCON1         DATA 0xa6
0000             60   _CLEN0          DATA 0xc6
0000             61   _CLIE0          DATA 0xc7
0000             62   _CLIF0          DATA 0xe8
0000             63   _CLKSEL         DATA 0xa9
0000             64   _CLOUT0         DATA 0xd1
0000             65   _CLU0CF         DATA 0xb1
0000             66   _CLU0FN         DATA 0xaf
0000             67   _CLU0MX         DATA 0x84
0000             68   _CLU1CF         DATA 0xb3
0000             69   _CLU1FN         DATA 0xb2
0000             70   _CLU1MX         DATA 0x85
0000             71   _CLU2CF         DATA 0xb6
0000             72   _CLU2FN         DATA 0xb5
0000             73   _CLU2MX         DATA 0x91
0000             74   _CLU3CF         DATA 0xbf
0000             75   _CLU3FN         DATA 0xbe
0000             76   _CLU3MX         DATA 0xae
0000             77   _CMP0CN0        DATA 0x9b
0000             78   _CMP0CN1        DATA 0x99
0000             79   _CMP0MD         DATA 0x9d
0000             80   _CMP0MX         DATA 0x9f
0000             81   _CMP1CN0        DATA 0xbf
0000             82   _CMP1CN1        DATA 0xac
0000             83   _CMP1MD         DATA 0xab
0000             84   _CMP1MX         DATA 0xaa
0000             85   _CRC0CN0        DATA 0xce
0000             86   _CRC0CN1        DATA 0x86
0000             87   _CRC0CNT        DATA 0xd3
0000             88   _CRC0DAT        DATA 0xcb
0000             89   _CRC0FLIP       DATA 0xcf
0000             90   _CRC0IN         DATA 0xca
0000             91   _CRC0ST         DATA 0xd2
0000             92   _DAC0CF0        DATA 0x91
0000             93   _DAC0CF1        DATA 0x92
0000             94   _DAC0H          DATA 0x85
0000             95   _DAC0L          DATA 0x84
0000             96   _DAC1CF0        DATA 0x93
0000             97   _DAC1CF1        DATA 0x94
0000             98   _DAC1H          DATA 0x8a
0000             99   _DAC1L          DATA 0x89
0000            100   _DAC2CF0        DATA 0x95
0000            101   _DAC2CF1        DATA 0x96
0000            102   _DAC2H          DATA 0x8c
0000            103   _DAC2L          DATA 0x8b
0000            104   _DAC3CF0        DATA 0x9a
0000            105   _DAC3CF1        DATA 0x9c
0000            106   _DAC3H          DATA 0x8e
0000            107   _DAC3L          DATA 0x8d
0000            108   _DACGCF0        DATA 0x88
0000            109   _DACGCF1        DATA 0x98
0000            110   _DACGCF2        DATA 0xa2
0000            111   _DERIVID        DATA 0xad
0000            112   _DEVICEID       DATA 0xb5
0000            113   _DPH            DATA 0x83
0000            114   _DPL            DATA 0x82
0000            115   _EIE1           DATA 0xe6
0000            116   _EIE2           DATA 0xf3
0000            117   _EIP1           DATA 0xbb
0000            118   _EIP1H          DATA 0xee
0000            119   _EIP2           DATA 0xed
0000            120   _EIP2H          DATA 0xf6
0000            121   _EMI0CN         DATA 0xe7
0000            122   _FLKEY          DATA 0xb7
0000            123   _HFO0CAL        DATA 0xc7
0000            124   _HFO1CAL        DATA 0xd6
0000            125   _HFOCN          DATA 0xef
0000            126   _I2C0ADM        DATA 0xff
0000            127   _I2C0CN0        DATA 0xba
0000            128   _I2C0DIN        DATA 0xbc
0000            129   _I2C0DOUT       DATA 0xbb
0000            130   _I2C0FCN0       DATA 0xad
0000            131   _I2C0FCN1       DATA 0xab
0000            132   _I2C0FCT        DATA 0xf5
0000            133   _I2C0SLAD       DATA 0xbd
0000            134   _I2C0STAT       DATA 0xb9
0000            135   _IE             DATA 0xa8
0000            136   _IP             DATA 0xb8
0000            137   _IPH            DATA 0xf2
0000            138   _IT01CF         DATA 0xe4
0000            139   _LFO0CN         DATA 0xb1
0000            140   _P0             DATA 0x80
0000            141   _P0MASK         DATA 0xfe
0000            142   _P0MAT          DATA 0xfd
0000            143   _P0MDIN         DATA 0xf1
0000            144   _P0MDOUT        DATA 0xa4
0000            145   _P0SKIP         DATA 0xd4
0000            146   _P1             DATA 0x90
0000            147   _P1MASK         DATA 0xee
0000            148   _P1MAT          DATA 0xed
0000            149   _P1MDIN         DATA 0xf2
0000            150   _P1MDOUT        DATA 0xa5
0000            151   _P1SKIP         DATA 0xd5
0000            152   _P2             DATA 0xa0
0000            153   _P2MASK         DATA 0xfc
0000            154   _P2MAT          DATA 0xfb
0000            155   _P2MDIN         DATA 0xf3
0000            156   _P2MDOUT        DATA 0xa6
0000            157   _P2SKIP         DATA 0xcc
0000            158   _P3             DATA 0xb0
0000            159   _P3MDIN         DATA 0xf4
0000            160   _P3MDOUT        DATA 0x9c
0000            161   _PCA0CENT       DATA 0x9e
0000            162   _PCA0CLR        DATA 0x9c
0000            163   _PCA0CN0        DATA 0xd8
0000            164   _PCA0CPH0       DATA 0xfc
0000            165   _PCA0CPH1       DATA 0xea
0000            166   _PCA0CPH2       DATA 0xec
0000            167   _PCA0CPH3       DATA 0xf5
0000            168   _PCA0CPH4       DATA 0x85
0000            169   _PCA0CPH5       DATA 0xde
0000            170   _PCA0CPL0       DATA 0xfb
0000            171   _PCA0CPL1       DATA 0xe9
0000            172   _PCA0CPL2       DATA 0xeb
0000            173   _PCA0CPL3       DATA 0xf4
0000            174   _PCA0CPL4       DATA 0x84
0000            175   _PCA0CPL5       DATA 0xdd
0000            176   _PCA0CPM0       DATA 0xda
0000            177   _PCA0CPM1       DATA 0xdb
0000            178   _PCA0CPM2       DATA 0xdc
0000            179   _PCA0CPM3       DATA 0xae
0000            180   _PCA0CPM4       DATA 0xaf
0000            181   _PCA0CPM5       DATA 0xcc
0000            182   _PCA0H          DATA 0xfa
0000            183   _PCA0L          DATA 0xf9
0000            184   _PCA0MD         DATA 0xd9
0000            185   _PCA0POL        DATA 0x96
0000            186   _PCA0PWM        DATA 0xf7
0000            187   _PCON0          DATA 0x87
0000            188   _PCON1          DATA 0xcd
0000            189   _PFE0CN         DATA 0xc1
0000            190   _PRTDRV         DATA 0xf6
0000            191   _PSCTL          DATA 0x8f
0000            192   _PSTAT0         DATA 0xaa
0000            193   _PSW            DATA 0xd0
0000            194   _REF0CN         DATA 0xd1
0000            195   _REG0CN         DATA 0xc9
0000            196   _REVID          DATA 0xb6
0000            197   _RSTSRC         DATA 0xef
0000            198   _SBCON1         DATA 0x94
0000            199   _SBRLH1         DATA 0x96
0000            200   _SBRLL1         DATA 0x95
0000            201   _SBUF           DATA 0x99
0000            202   _SBUF0          DATA 0x99
0000            203   _SBUF1          DATA 0x92
0000            204   _SCON           DATA 0x98
0000            205   _SCON0          DATA 0x98
0000            206   _SCON1          DATA 0xc8
0000            207   _SFRPAGE        DATA 0xa7
0000            208   _SFRPGCN        DATA 0xbc
0000            209   _SFRSTACK       DATA 0xd7
0000            210   _SMB0ADM        DATA 0xd6
0000            211   _SMB0ADR        DATA 0xd7
0000            212   _SMB0CF         DATA 0xc1
0000            213   _SMB0CN0        DATA 0xc0
0000            214   _SMB0DAT        DATA 0xc2
0000            215   _SMB0FCN0       DATA 0xc3
0000            216   _SMB0FCN1       DATA 0xc4
0000            217   _SMB0FCT        DATA 0xef
0000            218   _SMB0RXLN       DATA 0xc5
0000            219   _SMB0TC         DATA 0xac
0000            220   _SMOD1          DATA 0x93
0000            221   _SP             DATA 0x81
0000            222   _SPI0CFG        DATA 0xa1
0000            223   _SPI0CKR        DATA 0xa2
0000            224   _SPI0CN0        DATA 0xf8
0000            225   _SPI0DAT        DATA 0xa3
0000            226   _SPI0FCN0       DATA 0x9a
0000            227   _SPI0FCN1       DATA 0x9b
0000            228   _SPI0FCT        DATA 0xf7
0000            229   _SPI0PCF        DATA 0xdf
0000            230   _TCON           DATA 0x88
0000            231   _TH0            DATA 0x8c
0000            232   _TH1            DATA 0x8d
0000            233   _TL0            DATA 0x8a
0000            234   _TL1            DATA 0x8b
0000            235   _TMOD           DATA 0x89
0000            236   _TMR2CN0        DATA 0xc8
0000            237   _TMR2CN1        DATA 0xfd
0000            238   _TMR2H          DATA 0xcf
0000            239   _TMR2L          DATA 0xce
0000            240   _TMR2RLH        DATA 0xcb
0000            241   _TMR2RLL        DATA 0xca
0000            242   _TMR3CN0        DATA 0x91
0000            243   _TMR3CN1        DATA 0xfe
0000            244   _TMR3H          DATA 0x95
0000            245   _TMR3L          DATA 0x94
0000            246   _TMR3RLH        DATA 0x93
0000            247   _TMR3RLL        DATA 0x92
0000            248   _TMR4CN0        DATA 0x98
0000            249   _TMR4CN1        DATA 0xff
0000            250   _TMR4H          DATA 0xa5
0000            251   _TMR4L          DATA 0xa4
0000            252   _TMR4RLH        DATA 0xa3
0000            253   _TMR4RLL        DATA 0xa2
0000            254   _TMR5CN0        DATA 0xc0
0000            255   _TMR5CN1        DATA 0xf1
0000            256   _TMR5H          DATA 0xd5
0000            257   _TMR5L          DATA 0xd4
0000            258   _TMR5RLH        DATA 0xd3
0000            259   _TMR5RLL        DATA 0xd2
0000            260   _UART0PCF       DATA 0xd9
0000            261   _UART1FCN0      DATA 0x9d
0000            262   _UART1FCN1      DATA 0xd8
0000            263   _UART1FCT       DATA 0xfa
0000            264   _UART1LIN       DATA 0x9e
0000            265   _UART1PCF       DATA 0xda
0000            266   _VDM0CN         DATA 0xff
0000            267   _WDTCN          DATA 0x97
0000            268   _XBR0           DATA 0xe1
0000            269   _XBR1           DATA 0xe2
0000            270   _XBR2           DATA 0xe3
0000            271   _XOSC0CN        DATA 0x86
0000            272   _DPTR           DATA 0x8382
0000            273   _TMR2RL         DATA 0xcbca
0000            274   _TMR3RL         DATA 0x9392
0000            275   _TMR4RL         DATA 0xa3a2
0000            276   _TMR5RL         DATA 0xd3d2
0000            277   _TMR0           DATA 0x8c8a
0000            278   _TMR1           DATA 0x8d8b
0000            279   _TMR2           DATA 0xcfce
0000            280   _TMR3           DATA 0x9594
0000            281   _TMR4           DATA 0xa5a4
0000            282   _TMR5           DATA 0xd5d4
0000            283   _SBRL1          DATA 0x9695
0000            284   _PCA0           DATA 0xfaf9
0000            285   _PCA0CP0        DATA 0xfcfb
0000            286   _PCA0CP1        DATA 0xeae9
0000            287   _PCA0CP2        DATA 0xeceb
0000            288   _PCA0CP3        DATA 0xf5f4
0000            289   _PCA0CP4        DATA 0x8584
0000            290   _PCA0CP5        DATA 0xdedd
0000            291   _ADC0ASA        DATA 0xb6b5
0000            292   _ADC0GT         DATA 0xc4c3
0000            293   _ADC0           DATA 0xbebd
0000            294   _ADC0LT         DATA 0xc6c5
0000            295   _DAC0           DATA 0x8584
0000            296   _DAC1           DATA 0x8a89
0000            297   _DAC2           DATA 0x8c8b
0000            298   _DAC3           DATA 0x8e8d
0000            299   ;--------------------------------------------------------
0000            300   ; special function bits
0000            301   ;--------------------------------------------------------
0000            302   _ACC_0          BIT 0xe0
0000            303   _ACC_1          BIT 0xe1
0000            304   _ACC_2          BIT 0xe2
0000            305   _ACC_3          BIT 0xe3
0000            306   _ACC_4          BIT 0xe4
0000            307   _ACC_5          BIT 0xe5
0000            308   _ACC_6          BIT 0xe6
0000            309   _ACC_7          BIT 0xe7
0000            310   _TEMPE          BIT 0xe8
0000            311   _ADGN0          BIT 0xe9
0000            312   _ADGN1          BIT 0xea
0000            313   _ADWINT         BIT 0xeb
0000            314   _ADBUSY         BIT 0xec
0000            315   _ADINT          BIT 0xed
0000            316   _IPOEN          BIT 0xee
0000            317   _ADEN           BIT 0xef
0000            318   _B_0            BIT 0xf0
0000            319   _B_1            BIT 0xf1
0000            320   _B_2            BIT 0xf2
0000            321   _B_3            BIT 0xf3
0000            322   _B_4            BIT 0xf4
0000            323   _B_5            BIT 0xf5
0000            324   _B_6            BIT 0xf6
0000            325   _B_7            BIT 0xf7
0000            326   _C0FIF          BIT 0xe8
0000            327   _C0RIF          BIT 0xe9
0000            328   _C1FIF          BIT 0xea
0000            329   _C1RIF          BIT 0xeb
0000            330   _C2FIF          BIT 0xec
0000            331   _C2RIF          BIT 0xed
0000            332   _C3FIF          BIT 0xee
0000            333   _C3RIF          BIT 0xef
0000            334   _D1SRC0         BIT 0x88
0000            335   _D1SRC1         BIT 0x89
0000            336   _D1AMEN         BIT 0x8a
0000            337   _D01REFSL       BIT 0x8b
0000            338   _D3SRC0         BIT 0x8c
0000            339   _D3SRC1         BIT 0x8d
0000            340   _D3AMEN         BIT 0x8e
0000            341   _D23REFSL       BIT 0x8f
0000            342   _D0UDIS         BIT 0x98
0000            343   _D1UDIS         BIT 0x99
0000            344   _D2UDIS         BIT 0x9a
0000            345   _D3UDIS         BIT 0x9b
0000            346   _EX0            BIT 0xa8
0000            347   _ET0            BIT 0xa9
0000            348   _EX1            BIT 0xaa
0000            349   _ET1            BIT 0xab
0000            350   _ES0            BIT 0xac
0000            351   _ET2            BIT 0xad
0000            352   _ESPI0          BIT 0xae
0000            353   _EA             BIT 0xaf
0000            354   _PX0            BIT 0xb8
0000            355   _PT0            BIT 0xb9
0000            356   _PX1            BIT 0xba
0000            357   _PT1            BIT 0xbb
0000            358   _PS0            BIT 0xbc
0000            359   _PT2            BIT 0xbd
0000            360   _PSPI0          BIT 0xbe
0000            361   _P0_0           BIT 0x80
0000            362   _P0_1           BIT 0x81
0000            363   _P0_2           BIT 0x82
0000            364   _P0_3           BIT 0x83
0000            365   _P0_4           BIT 0x84
0000            366   _P0_5           BIT 0x85
0000            367   _P0_6           BIT 0x86
0000            368   _P0_7           BIT 0x87
0000            369   _P1_0           BIT 0x90
0000            370   _P1_1           BIT 0x91
0000            371   _P1_2           BIT 0x92
0000            372   _P1_3           BIT 0x93
0000            373   _P1_4           BIT 0x94
0000            374   _P1_5           BIT 0x95
0000            375   _P1_6           BIT 0x96
0000            376   _P1_7           BIT 0x97
0000            377   _P2_0           BIT 0xa0
0000            378   _P2_1           BIT 0xa1
0000            379   _P2_2           BIT 0xa2
0000            380   _P2_3           BIT 0xa3
0000            381   _P2_4           BIT 0xa4
0000            382   _P2_5           BIT 0xa5
0000            383   _P2_6           BIT 0xa6
0000            384   _P3_0           BIT 0xb0
0000            385   _P3_1           BIT 0xb1
0000            386   _P3_2           BIT 0xb2
0000            387   _P3_3           BIT 0xb3
0000            388   _P3_4           BIT 0xb4
0000            389   _P3_7           BIT 0xb7
0000            390   _CCF0           BIT 0xd8
0000            391   _CCF1           BIT 0xd9
0000            392   _CCF2           BIT 0xda
0000            393   _CCF3           BIT 0xdb
0000            394   _CCF4           BIT 0xdc
0000            395   _CCF5           BIT 0xdd
0000            396   _CR             BIT 0xde
0000            397   _CF             BIT 0xdf
0000            398   _PARITY         BIT 0xd0
0000            399   _F1             BIT 0xd1
0000            400   _OV             BIT 0xd2
0000            401   _RS0            BIT 0xd3
0000            402   _RS1            BIT 0xd4
0000            403   _F0             BIT 0xd5
0000            404   _AC             BIT 0xd6
0000            405   _CY             BIT 0xd7
0000            406   _RI             BIT 0x98
0000            407   _TI             BIT 0x99
0000            408   _RB8            BIT 0x9a
0000            409   _TB8            BIT 0x9b
0000            410   _REN            BIT 0x9c
0000            411   _CE             BIT 0x9d
0000            412   _SMODE          BIT 0x9e
0000            413   _RI1            BIT 0xc8
0000            414   _TI1            BIT 0xc9
0000            415   _RBX1           BIT 0xca
0000            416   _TBX1           BIT 0xcb
0000            417   _REN1           BIT 0xcc
0000            418   _PERR1          BIT 0xcd
0000            419   _OVR1           BIT 0xce
0000            420   _SI             BIT 0xc0
0000            421   _ACK            BIT 0xc1
0000            422   _ARBLOST        BIT 0xc2
0000            423   _ACKRQ          BIT 0xc3
0000            424   _STO            BIT 0xc4
0000            425   _STA            BIT 0xc5
0000            426   _TXMODE         BIT 0xc6
0000            427   _MASTER         BIT 0xc7
0000            428   _SPIEN          BIT 0xf8
0000            429   _TXNF           BIT 0xf9
0000            430   _NSSMD0         BIT 0xfa
0000            431   _NSSMD1         BIT 0xfb
0000            432   _RXOVRN         BIT 0xfc
0000            433   _MODF           BIT 0xfd
0000            434   _WCOL           BIT 0xfe
0000            435   _SPIF           BIT 0xff
0000            436   _IT0            BIT 0x88
0000            437   _IE0            BIT 0x89
0000            438   _IT1            BIT 0x8a
0000            439   _IE1            BIT 0x8b
0000            440   _TR0            BIT 0x8c
0000            441   _TF0            BIT 0x8d
0000            442   _TR1            BIT 0x8e
0000            443   _TF1            BIT 0x8f
0000            444   _T2XCLK0        BIT 0xc8
0000            445   _T2XCLK1        BIT 0xc9
0000            446   _TR2            BIT 0xca
0000            447   _T2SPLIT        BIT 0xcb
0000            448   _TF2CEN         BIT 0xcc
0000            449   _TF2LEN         BIT 0xcd
0000            450   _TF2L           BIT 0xce
0000            451   _TF2H           BIT 0xcf
0000            452   _T4XCLK0        BIT 0x98
0000            453   _T4XCLK1        BIT 0x99
0000            454   _TR4            BIT 0x9a
0000            455   _T4SPLIT        BIT 0x9b
0000            456   _TF4CEN         BIT 0x9c
0000            457   _TF4LEN         BIT 0x9d
0000            458   _TF4L           BIT 0x9e
0000            459   _TF4H           BIT 0x9f
0000            460   _T5XCLK0        BIT 0xc0
0000            461   _T5XCLK1        BIT 0xc1
0000            462   _TR5            BIT 0xc2
0000            463   _T5SPLIT        BIT 0xc3
0000            464   _TF5CEN         BIT 0xc4
0000            465   _TF5LEN         BIT 0xc5
0000            466   _TF5L           BIT 0xc6
0000            467   _TF5H           BIT 0xc7
0000            468   _RIE            BIT 0xd8
0000            469   _RXTO0          BIT 0xd9
0000            470   _RXTO1          BIT 0xda
0000            471   _RFRQ           BIT 0xdb
0000            472   _TIE            BIT 0xdc
0000            473   _TXHOLD         BIT 0xdd
0000            474   _TXNF1          BIT 0xde
0000            475   _TFRQ           BIT 0xdf
0000            476   ;--------------------------------------------------------
0000            477   ; overlayable register banks
0000            478   ;--------------------------------------------------------
0000            479            rbank0 segment data overlay
0000            480   ;--------------------------------------------------------
0000            481   ; internal ram data
0000            482   ;--------------------------------------------------------
0000            483            rseg R_DSEG
0000            484   _main_v_1_59:
0000            485            ds 16
0010            486   _main_norm_x_1_59:
0010            487            ds 4
0014            488   _main_sloc0_1_0:
0014            489            ds 4
0018            490   ;--------------------------------------------------------
0018            491   ; overlayable items in internal ram 
0018            492   ;--------------------------------------------------------
0000            493            rseg    R_OSEG
0000            494            rseg    R_OSEG
0000            495   _InitPinADC_PARM_2:
0000            496            ds 1
0001            497            rseg    R_OSEG
0001            498   ;--------------------------------------------------------
0001            499   ; indirectly addressable internal ram data
0001            500   ;--------------------------------------------------------
0000            501            rseg R_ISEG
0000            502   ;--------------------------------------------------------
0000            503   ; absolute internal ram data
0000            504   ;--------------------------------------------------------
0000            505            DSEG
0000            506   ;--------------------------------------------------------
0000            507   ; bit data
0000            508   ;--------------------------------------------------------
0000            509            rseg R_BSEG
0000            510   ;--------------------------------------------------------
0000            511   ; paged external ram data
0000            512   ;--------------------------------------------------------
0000            513            rseg R_PSEG
0000            514   ;--------------------------------------------------------
0000            515   ; external ram data
0000            516   ;--------------------------------------------------------
0000            517            rseg R_XSEG
0000            518   ;--------------------------------------------------------
0000            519   ; absolute external ram data
0000            520   ;--------------------------------------------------------
0000            521            XSEG
0000            522   ;--------------------------------------------------------
0000            523   ; external initialized ram data
0000            524   ;--------------------------------------------------------
0000            525            rseg R_IXSEG
0000            526            rseg R_HOME
0000            527            rseg R_GSINIT
0000            528            rseg R_CSEG
0000            529   ;--------------------------------------------------------
0000            530   ; Reset entry point and interrupt vectors
0000            531   ;--------------------------------------------------------
0000            532            CSEG at 0x0000
0000 020000     533            ljmp    _crt0
0003            534   ;--------------------------------------------------------
0003            535   ; global & static initialisations
0003            536   ;--------------------------------------------------------
0000            537            rseg R_HOME
0000            538            rseg R_GSINIT
0000            539            rseg R_GSINIT
0000            540   ;--------------------------------------------------------
0000            541   ; data variables initialization
0000            542   ;--------------------------------------------------------
0000            543            rseg R_DINIT
0000            544            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            545   ;--------------------------------------------------------
0000            546   ; code
0000            547   ;--------------------------------------------------------
0000            548            rseg R_CSEG
0000            549   ;------------------------------------------------------------
0000            550   ;Allocation info for local variables in function '_c51_external_startup'
0000            551   ;------------------------------------------------------------
0000            552   ;------------------------------------------------------------
0000            553   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:17: char _c51_external_startup (void)
0000            554   ;        -----------------------------------------
0000            555   ;         function _c51_external_startup
0000            556   ;        -----------------------------------------
0000            557   __c51_external_startup:
0000            558            using   0
0000            559   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:20: SFRPAGE = 0x00;
0000 75A700     560            mov     _SFRPAGE,#0x00
0003            561   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:21: WDTCN = 0xDE; //First key
0003 7597DE     562            mov     _WDTCN,#0xDE
0006            563   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:22: WDTCN = 0xAD; //Second key
0006 7597AD     564            mov     _WDTCN,#0xAD
0009            565   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:24: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     566            mov     _VDM0CN,#0x80
000C            567   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:25: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     568            mov     _RSTSRC,#0x06
000F            569   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:32: SFRPAGE = 0x10;
000F 75A710     570            mov     _SFRPAGE,#0x10
0012            571   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:33: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     572            mov     _PFE0CN,#0x20
0015            573   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:34: SFRPAGE = 0x00;
0015 75A700     574            mov     _SFRPAGE,#0x00
0018            575   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:55: CLKSEL = 0x00;
0018 75A900     576            mov     _CLKSEL,#0x00
001B            577   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:56: CLKSEL = 0x00;
001B 75A900     578            mov     _CLKSEL,#0x00
001E            579   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:57: while ((CLKSEL & 0x80) == 0);
001E            580   L002001?:
001E E5A9       581            mov     a,_CLKSEL
0020 30E7F8     582            jnb     acc.7,L002001?
0023            583   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:58: CLKSEL = 0x03;
0023 75A903     584            mov     _CLKSEL,#0x03
0026            585   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:59: CLKSEL = 0x03;
0026 75A903     586            mov     _CLKSEL,#0x03
0029            587   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:60: while ((CLKSEL & 0x80) == 0);
0029            588   L002004?:
0029 E5A9       589            mov     a,_CLKSEL
002B 30E778     590            jnb     acc.7,L002004?
002E            591   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:65: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
002E 43A410     592            orl     _P0MDOUT,#0x10
0031            593   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:66: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0031 75E101     594            mov     _XBR0,#0x01
0034            595   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:67: XBR1     = 0X00;
0034 75E200     596            mov     _XBR1,#0x00
0037            597   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:68: XBR2     = 0x40; // Enable crossbar and weak pull-ups
0037 75E340     598            mov     _XBR2,#0x40
003A            599   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:74: SCON0 = 0x10;
003A 759810     600            mov     _SCON0,#0x10
003D            601   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:75: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
003D 758DE6     602            mov     _TH1,#0xE6
0040            603   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:76: TL1 = TH1;      // Init Timer1
0040 858D8B     604            mov     _TL1,_TH1
0043            605   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:77: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0043 53890F     606            anl     _TMOD,#0x0F
0046            607   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:78: TMOD |=  0x20;                       
0046 438920     608            orl     _TMOD,#0x20
0049            609   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:79: TR1 = 1; // START Timer1
0049 D28E       610            setb    _TR1
004B            611   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:80: TI = 1;  // Indicate TX0 ready
004B D299       612            setb    _TI
004D            613   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:82: return 0;
004D 758200     614            mov     dpl,#0x00
0050 22         615            ret
0051            616   ;------------------------------------------------------------
0051            617   ;Allocation info for local variables in function 'InitADC'
0051            618   ;------------------------------------------------------------
0051            619   ;------------------------------------------------------------
0051            620   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:85: void InitADC (void)
0051            621   ;        -----------------------------------------
0051            622   ;         function InitADC
0051            623   ;        -----------------------------------------
0051            624   _InitADC:
0051            625   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:87: SFRPAGE = 0x00;
0051 75A700     626            mov     _SFRPAGE,#0x00
0054            627   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:88: ADEN=0; // Disable ADC
0054 C2EF       628            clr     _ADEN
0056            629   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:93: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0056 75B280     630            mov     _ADC0CN1,#0x80
0059            631   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:97: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
0059 75BC20     632            mov     _ADC0CF0,#0x20
005C            633   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:101: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
005C 75B91E     634            mov     _ADC0CF1,#0x1E
005F            635   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:110: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
005F 75E800     636            mov     _ADC0CN0,#0x00
0062            637   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:115: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0062 75DF3F     638            mov     _ADC0CF2,#0x3F
0065            639   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:119: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0065 75B300     640            mov     _ADC0CN2,#0x00
0068            641   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:121: ADEN=1; // Enable ADC
0068 D2EF       642            setb    _ADEN
006A 22         643            ret
006B            644   ;------------------------------------------------------------
006B            645   ;Allocation info for local variables in function 'Timer3us'
006B            646   ;------------------------------------------------------------
006B            647   ;us                        Allocated to registers r2 
006B            648   ;i                         Allocated to registers r3 
006B            649   ;------------------------------------------------------------
006B            650   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:125: void Timer3us(unsigned char us)
006B            651   ;        -----------------------------------------
006B            652   ;         function Timer3us
006B            653   ;        -----------------------------------------
006B            654   _Timer3us:
006B AA82       655            mov     r2,dpl
006D            656   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:130: CKCON0|=0b_0100_0000;
006D 438E40     657            orl     _CKCON0,#0x40
0070            658   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:132: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0070 7592B8     659            mov     _TMR3RL,#0xB8
0073 7593FF     660            mov     (_TMR3RL >> 8),#0xFF
0076            661   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:133: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0076 859294     662            mov     _TMR3,_TMR3RL
0079 859395     663            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007C            664   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:135: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007C 759104     665            mov     _TMR3CN0,#0x04
007F            666   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:136: for (i = 0; i < us; i++)       // Count <us> overflows
007F 7B00       667            mov     r3,#0x00
0081            668   L004004?:
0081 C3         669            clr     c
0082 EB         670            mov     a,r3
0083 9A         671            subb    a,r2
0084 5000       672            jnc     L004007?
0086            673   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:138: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0086            674   L004001?:
0086 E591       675            mov     a,_TMR3CN0
0088 30E778     676            jnb     acc.7,L004001?
008B            677   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:139: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008B 53917F     678            anl     _TMR3CN0,#0x7F
008E            679   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:136: for (i = 0; i < us; i++)       // Count <us> overflows
008E 0B         680            inc     r3
008F 8000       681            sjmp    L004004?
0091            682   L004007?:
0091            683   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:141: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0091 759100     684            mov     _TMR3CN0,#0x00
0094 22         685            ret
0095            686   ;------------------------------------------------------------
0095            687   ;Allocation info for local variables in function 'waitms'
0095            688   ;------------------------------------------------------------
0095            689   ;ms                        Allocated to registers r2 r3 
0095            690   ;j                         Allocated to registers r4 r5 
0095            691   ;k                         Allocated to registers r6 
0095            692   ;------------------------------------------------------------
0095            693   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:144: void waitms (unsigned int ms)
0095            694   ;        -----------------------------------------
0095            695   ;         function waitms
0095            696   ;        -----------------------------------------
0095            697   _waitms:
0095 AA82       698            mov     r2,dpl
0097 AB83       699            mov     r3,dph
0099            700   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:148: for(j=0; j<ms; j++)
0099 7C00       701            mov     r4,#0x00
009B 7D00       702            mov     r5,#0x00
009D            703   L005005?:
009D C3         704            clr     c
009E EC         705            mov     a,r4
009F 9A         706            subb    a,r2
00A0 ED         707            mov     a,r5
00A1 9B         708            subb    a,r3
00A2 5000       709            jnc     L005009?
00A4            710   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:149: for (k=0; k<4; k++) Timer3us(250);
00A4 7E00       711            mov     r6,#0x00
00A6            712   L005001?:
00A6 BE04B8     713            cjne    r6,#0x04,L005018?
00A9            714   L005018?:
00A9 5000       715            jnc     L005007?
00AB 7582FA     716            mov     dpl,#0xFA
00AE C002       717            push    ar2
00B0 C003       718            push    ar3
00B2 C004       719            push    ar4
00B4 C005       720            push    ar5
00B6 C006       721            push    ar6
00B8 120000     722            lcall   _Timer3us
00BB D006       723            pop     ar6
00BD D005       724            pop     ar5
00BF D004       725            pop     ar4
00C1 D003       726            pop     ar3
00C3 D002       727            pop     ar2
00C5 0E         728            inc     r6
00C6 8000       729            sjmp    L005001?
00C8            730   L005007?:
00C8            731   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:148: for(j=0; j<ms; j++)
00C8 0C         732            inc     r4
00C9 BC00F8     733            cjne    r4,#0x00,L005005?
00CC 0D         734            inc     r5
00CD 8000       735            sjmp    L005005?
00CF            736   L005009?:
00CF 22         737            ret
00D0            738   ;------------------------------------------------------------
00D0            739   ;Allocation info for local variables in function 'InitPinADC'
00D0            740   ;------------------------------------------------------------
00D0            741   ;pin_num                   Allocated with name '_InitPinADC_PARM_2'
00D0            742   ;portno                    Allocated to registers r2 
00D0            743   ;mask                      Allocated to registers r3 
00D0            744   ;------------------------------------------------------------
00D0            745   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:154: void InitPinADC (unsigned char portno, unsigned char pin_num)
00D0            746   ;        -----------------------------------------
00D0            747   ;         function InitPinADC
00D0            748   ;        -----------------------------------------
00D0            749   _InitPinADC:
00D0 AA82       750            mov     r2,dpl
00D2            751   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:158: mask=1<<pin_num;
00D2 85D8F0     752            mov     b,_InitPinADC_PARM_2
00D5 05F0       753            inc     b
00D7 7401       754            mov     a,#0x01
00D9 8000       755            sjmp    L006013?
00DB            756   L006011?:
00DB 25E0       757            add     a,acc
00DD            758   L006013?:
00DD D5F0B8     759            djnz    b,L006011?
00E0 FB         760            mov     r3,a
00E1            761   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:160: SFRPAGE = 0x20;
00E1 75A720     762            mov     _SFRPAGE,#0x20
00E4            763   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:161: switch (portno)
00E4 BA00F8     764            cjne    r2,#0x00,L006014?
00E7 8000       765            sjmp    L006001?
00E9            766   L006014?:
00E9 BA0178     767            cjne    r2,#0x01,L006015?
00EC 8000       768            sjmp    L006002?
00EE            769   L006015?:
00EE            770   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:163: case 0:
00EE BA02F8     771            cjne    r2,#0x02,L006005?
00F1 8000       772            sjmp    L006003?
00F3            773   L006001?:
00F3            774   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:164: P0MDIN &= (~mask); // Set pin as analog input
00F3 EB         775            mov     a,r3
00F4 F4         776            cpl     a
00F5 FA         777            mov     r2,a
00F6 52F1       778            anl     _P0MDIN,a
00F8            779   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:165: P0SKIP |= mask; // Skip Crossbar decoding for this pin
00F8 EB         780            mov     a,r3
00F9 42D4       781            orl     _P0SKIP,a
00FB            782   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:166: break;
00FB            783   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:167: case 1:
00FB 8000       784            sjmp    L006005?
00FD            785   L006002?:
00FD            786   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:168: P1MDIN &= (~mask); // Set pin as analog input
00FD EB         787            mov     a,r3
00FE F4         788            cpl     a
00FF FA         789            mov     r2,a
0100 52F2       790            anl     _P1MDIN,a
0102            791   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:169: P1SKIP |= mask; // Skip Crossbar decoding for this pin
0102 EB         792            mov     a,r3
0103 42D5       793            orl     _P1SKIP,a
0105            794   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:170: break;
0105            795   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:171: case 2:
0105 8000       796            sjmp    L006005?
0107            797   L006003?:
0107            798   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:172: P2MDIN &= (~mask); // Set pin as analog input
0107 EB         799            mov     a,r3
0108 F4         800            cpl     a
0109 FA         801            mov     r2,a
010A 52F3       802            anl     _P2MDIN,a
010C            803   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:173: P2SKIP |= mask; // Skip Crossbar decoding for this pin
010C EB         804            mov     a,r3
010D 42CC       805            orl     _P2SKIP,a
010F            806   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:177: }
010F            807   L006005?:
010F            808   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:178: SFRPAGE = 0x00;
010F 75A700     809            mov     _SFRPAGE,#0x00
0112 22         810            ret
0113            811   ;------------------------------------------------------------
0113            812   ;Allocation info for local variables in function 'ADC_at_Pin'
0113            813   ;------------------------------------------------------------
0113            814   ;pin                       Allocated to registers 
0113            815   ;------------------------------------------------------------
0113            816   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:181: unsigned int ADC_at_Pin(unsigned char pin)
0113            817   ;        -----------------------------------------
0113            818   ;         function ADC_at_Pin
0113            819   ;        -----------------------------------------
0113            820   _ADC_at_Pin:
0113 8582BB     821            mov     _ADC0MX,dpl
0116            822   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:184: ADINT = 0;
0116 C2ED       823            clr     _ADINT
0118            824   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:185: ADBUSY = 1;     // Convert voltage at the pin
0118 D2EC       825            setb    _ADBUSY
011A            826   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:186: while (!ADINT); // Wait for conversion to complete
011A            827   L007001?:
011A 30ED78     828            jnb     _ADINT,L007001?
011D            829   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:187: return (ADC0);
011D 85BD82     830            mov     dpl,_ADC0
0120 85BE83     831            mov     dph,(_ADC0 >> 8)
0123 22         832            ret
0124            833   ;------------------------------------------------------------
0124            834   ;Allocation info for local variables in function 'Volts_at_Pin'
0124            835   ;------------------------------------------------------------
0124            836   ;pin                       Allocated to registers r2 
0124            837   ;------------------------------------------------------------
0124            838   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:190: float Volts_at_Pin(unsigned char pin)
0124            839   ;        -----------------------------------------
0124            840   ;         function Volts_at_Pin
0124            841   ;        -----------------------------------------
0124            842   _Volts_at_Pin:
0124            843   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:192: return ((ADC_at_Pin(pin)*VDD)/16383.0);
0124 120000     844            lcall   _ADC_at_Pin
0127 120000     845            lcall   ___uint2fs
012A AA82       846            mov     r2,dpl
012C AB83       847            mov     r3,dph
012E ACF0       848            mov     r4,b
0130 FD         849            mov     r5,a
0131 C002       850            push    ar2
0133 C003       851            push    ar3
0135 C004       852            push    ar4
0137 C005       853            push    ar5
0139 903333     854            mov     dptr,#0x3333
013C 75F053     855            mov     b,#0x53
013F 7440       856            mov     a,#0x40
0141 120000     857            lcall   ___fsmul
0144 AA82       858            mov     r2,dpl
0146 AB83       859            mov     r3,dph
0148 ACF0       860            mov     r4,b
014A FD         861            mov     r5,a
014B E581       862            mov     a,sp
014D 24FC       863            add     a,#0xfc
014F F581       864            mov     sp,a
0151 E4         865            clr     a
0152 C0E0       866            push    acc
0154 74FC       867            mov     a,#0xFC
0156 C0E0       868            push    acc
0158 747F       869            mov     a,#0x7F
015A C0E0       870            push    acc
015C 7446       871            mov     a,#0x46
015E C0E0       872            push    acc
0160 8A82       873            mov     dpl,r2
0162 8B83       874            mov     dph,r3
0164 8CF0       875            mov     b,r4
0166 ED         876            mov     a,r5
0167 120000     877            lcall   ___fsdiv
016A AA82       878            mov     r2,dpl
016C AB83       879            mov     r3,dph
016E ACF0       880            mov     r4,b
0170 FD         881            mov     r5,a
0171 E581       882            mov     a,sp
0173 24FC       883            add     a,#0xfc
0175 F581       884            mov     sp,a
0177 8A82       885            mov     dpl,r2
0179 8B83       886            mov     dph,r3
017B 8CF0       887            mov     b,r4
017D ED         888            mov     a,r5
017E 22         889            ret
017F            890   ;------------------------------------------------------------
017F            891   ;Allocation info for local variables in function 'main'
017F            892   ;------------------------------------------------------------
017F            893   ;v                         Allocated with name '_main_v_1_59'
017F            894   ;norm_x                    Allocated with name '_main_norm_x_1_59'
017F            895   ;norm_y                    Allocated to registers r2 r3 r4 r5 
017F            896   ;sloc0                     Allocated with name '_main_sloc0_1_0'
017F            897   ;------------------------------------------------------------
017F            898   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:195: void main (void)
017F            899   ;        -----------------------------------------
017F            900   ;         function main
017F            901   ;        -----------------------------------------
017F            902   _main:
017F            903   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:201: waitms(500); // Give PuTTy a chance to start before sending
017F 9001F4     904            mov     dptr,#0x01F4
0182 120000     905            lcall   _waitms
0185            906   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:202: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
0185 74B8       907            mov     a,#__str_0
0187 C0E0       908            push    acc
0189 74B7       909            mov     a,#(__str_0 >> 8)
018B C0E0       910            push    acc
018D 7480       911            mov     a,#0x80
018F C0E0       912            push    acc
0191 120000     913            lcall   _printf
0194 1581       914            dec     sp
0196 1581       915            dec     sp
0198 1581       916            dec     sp
019A            917   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:207: __FILE__, __DATE__, __TIME__);
019A            918   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:206: "Compiled: %s, %s\n\n",
019A 7438       919            mov     a,#__str_4
019C C0E0       920            push    acc
019E 74B8       921            mov     a,#(__str_4 >> 8)
01A0 C0E0       922            push    acc
01A2 7480       923            mov     a,#0x80
01A4 C0E0       924            push    acc
01A6 7478       925            mov     a,#__str_3
01A8 C0E0       926            push    acc
01AA 74B8       927            mov     a,#(__str_3 >> 8)
01AC C0E0       928            push    acc
01AE 7480       929            mov     a,#0x80
01B0 C0E0       930            push    acc
01B2 74B8       931            mov     a,#__str_2
01B4 C0E0       932            push    acc
01B6 74B8       933            mov     a,#(__str_2 >> 8)
01B8 C0E0       934            push    acc
01BA 7480       935            mov     a,#0x80
01BC C0E0       936            push    acc
01BE 74F8       937            mov     a,#__str_1
01C0 C0E0       938            push    acc
01C2 74B8       939            mov     a,#(__str_1 >> 8)
01C4 C0E0       940            push    acc
01C6 7480       941            mov     a,#0x80
01C8 C0E0       942            push    acc
01CA 120000     943            lcall   _printf
01CD E581       944            mov     a,sp
01CF 24F4       945            add     a,#0xf4
01D1 F581       946            mov     sp,a
01D3            947   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:209: InitPinADC(2, 2); // Configure P2.2 as analog input
01D3 75D802     948            mov     _InitPinADC_PARM_2,#0x02
01D6 758202     949            mov     dpl,#0x02
01D9 120000     950            lcall   _InitPinADC
01DC            951   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:210: InitPinADC(2, 3); // Configure P2.3 as analog input
01DC 75D803     952            mov     _InitPinADC_PARM_2,#0x03
01DF 758202     953            mov     dpl,#0x02
01E2 120000     954            lcall   _InitPinADC
01E5            955   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:211: InitPinADC(2, 4); // Configure P2.4 as analog input
01E5 75D804     956            mov     _InitPinADC_PARM_2,#0x04
01E8 758202     957            mov     dpl,#0x02
01EB 120000     958            lcall   _InitPinADC
01EE            959   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:212: InitPinADC(2, 5); // Configure P2.5 as analog input
01EE 75D805     960            mov     _InitPinADC_PARM_2,#0x05
01F1 758202     961            mov     dpl,#0x02
01F4 120000     962            lcall   _InitPinADC
01F7            963   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:213: InitADC();
01F7 120000     964            lcall   _InitADC
01FA            965   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:215: while(1)
01FA            966   L009002?:
01FA            967   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:218: v[0] = Volts_at_Pin(QFP32_MUX_P2_2);
01FA 75820F     968            mov     dpl,#0x0F
01FD 120000     969            lcall   _Volts_at_Pin
0200 AA82       970            mov     r2,dpl
0202 AB83       971            mov     r3,dph
0204 ACF0       972            mov     r4,b
0206 FD         973            mov     r5,a
0207 8AE8       974            mov     _main_v_1_59,r2
0209 8BE9       975            mov     (_main_v_1_59 + 1),r3
020B 8CEA       976            mov     (_main_v_1_59 + 2),r4
020D 8DEB       977            mov     (_main_v_1_59 + 3),r5
020F            978   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:219: v[1] = Volts_at_Pin(QFP32_MUX_P2_3);
020F 758210     979            mov     dpl,#0x10
0212 120000     980            lcall   _Volts_at_Pin
0215 AA82       981            mov     r2,dpl
0217 AB83       982            mov     r3,dph
0219 ACF0       983            mov     r4,b
021B FD         984            mov     r5,a
021C 8AEC       985            mov     (_main_v_1_59 + 0x0004),r2
021E 8BED       986            mov     ((_main_v_1_59 + 0x0004) + 1),r3
0220 8CEE       987            mov     ((_main_v_1_59 + 0x0004) + 2),r4
0222 8DEF       988            mov     ((_main_v_1_59 + 0x0004) + 3),r5
0224            989   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:220: v[2] = Volts_at_Pin(QFP32_MUX_P2_4);
0224 758211     990            mov     dpl,#0x11
0227 120000     991            lcall   _Volts_at_Pin
022A AA82       992            mov     r2,dpl
022C AB83       993            mov     r3,dph
022E ACF0       994            mov     r4,b
0230 FD         995            mov     r5,a
0231 8AF0       996            mov     (_main_v_1_59 + 0x0008),r2
0233 8BF1       997            mov     ((_main_v_1_59 + 0x0008) + 1),r3
0235 8CF2       998            mov     ((_main_v_1_59 + 0x0008) + 2),r4
0237 8DF3       999            mov     ((_main_v_1_59 + 0x0008) + 3),r5
0239           1000   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:221: v[3] = Volts_at_Pin(QFP32_MUX_P2_5);
0239 758212    1001            mov     dpl,#0x12
023C 120000    1002            lcall   _Volts_at_Pin
023F 858278    1003            mov     _main_sloc0_1_0,dpl
0242 858379    1004            mov     (_main_sloc0_1_0 + 1),dph
0245 85F07A    1005            mov     (_main_sloc0_1_0 + 2),b
0248 F57B      1006            mov     (_main_sloc0_1_0 + 3),a
024A 8578F4    1007            mov     (_main_v_1_59 + 0x000c),_main_sloc0_1_0
024D 8579F5    1008            mov     ((_main_v_1_59 + 0x000c) + 1),(_main_sloc0_1_0 + 1)
0250 857AF6    1009            mov     ((_main_v_1_59 + 0x000c) + 2),(_main_sloc0_1_0 + 2)
0253 857BF7    1010            mov     ((_main_v_1_59 + 0x000c) + 3),(_main_sloc0_1_0 + 3)
0256           1011   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:223: norm_x = (v[1] / 3.29) * 2.0 - 1.0;  // Horizontal (P2.3)
0256 745C      1012            mov     a,#0x5C
0258 C0E0      1013            push    acc
025A 748F      1014            mov     a,#0x8F
025C C0E0      1015            push    acc
025E 7452      1016            mov     a,#0x52
0260 C0E0      1017            push    acc
0262 7440      1018            mov     a,#0x40
0264 C0E0      1019            push    acc
0266 85EC82    1020            mov     dpl,(_main_v_1_59 + 0x0004)
0269 85ED83    1021            mov     dph,((_main_v_1_59 + 0x0004) + 1)
026C 85EEF0    1022            mov     b,((_main_v_1_59 + 0x0004) + 2)
026F E5EF      1023            mov     a,((_main_v_1_59 + 0x0004) + 3)
0271 120000    1024            lcall   ___fsdiv
0274 AE82      1025            mov     r6,dpl
0276 AF83      1026            mov     r7,dph
0278 AAF0      1027            mov     r2,b
027A FB        1028            mov     r3,a
027B E581      1029            mov     a,sp
027D 24FC      1030            add     a,#0xfc
027F F581      1031            mov     sp,a
0281 C006      1032            push    ar6
0283 C007      1033            push    ar7
0285 C002      1034            push    ar2
0287 C003      1035            push    ar3
0289 900000    1036            mov     dptr,#(0x00&0x00ff)
028C E4        1037            clr     a
028D F5F0      1038            mov     b,a
028F 7440      1039            mov     a,#0x40
0291 120000    1040            lcall   ___fsmul
0294 AA82      1041            mov     r2,dpl
0296 AB83      1042            mov     r3,dph
0298 ACF0      1043            mov     r4,b
029A FD        1044            mov     r5,a
029B E581      1045            mov     a,sp
029D 24FC      1046            add     a,#0xfc
029F F581      1047            mov     sp,a
02A1 E4        1048            clr     a
02A2 C0E0      1049            push    acc
02A4 C0E0      1050            push    acc
02A6 7480      1051            mov     a,#0x80
02A8 C0E0      1052            push    acc
02AA 743F      1053            mov     a,#0x3F
02AC C0E0      1054            push    acc
02AE 8A82      1055            mov     dpl,r2
02B0 8B83      1056            mov     dph,r3
02B2 8CF0      1057            mov     b,r4
02B4 ED        1058            mov     a,r5
02B5 120000    1059            lcall   ___fssub
02B8 858238    1060            mov     _main_norm_x_1_59,dpl
02BB 858339    1061            mov     (_main_norm_x_1_59 + 1),dph
02BE 85F03A    1062            mov     (_main_norm_x_1_59 + 2),b
02C1 F53B      1063            mov     (_main_norm_x_1_59 + 3),a
02C3 E581      1064            mov     a,sp
02C5 24FC      1065            add     a,#0xfc
02C7 F581      1066            mov     sp,a
02C9           1067   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:224: norm_y = (v[0] / 3.29) * 2.0 - 1.0;  // Vertical   (P2.2)
02C9 745C      1068            mov     a,#0x5C
02CB C0E0      1069            push    acc
02CD 748F      1070            mov     a,#0x8F
02CF C0E0      1071            push    acc
02D1 7452      1072            mov     a,#0x52
02D3 C0E0      1073            push    acc
02D5 7440      1074            mov     a,#0x40
02D7 C0E0      1075            push    acc
02D9 85E882    1076            mov     dpl,_main_v_1_59
02DC 85E983    1077            mov     dph,(_main_v_1_59 + 1)
02DF 85EAF0    1078            mov     b,(_main_v_1_59 + 2)
02E2 E5EB      1079            mov     a,(_main_v_1_59 + 3)
02E4 120000    1080            lcall   ___fsdiv
02E7 AE82      1081            mov     r6,dpl
02E9 AF83      1082            mov     r7,dph
02EB AAF0      1083            mov     r2,b
02ED FB        1084            mov     r3,a
02EE E581      1085            mov     a,sp
02F0 24FC      1086            add     a,#0xfc
02F2 F581      1087            mov     sp,a
02F4 C006      1088            push    ar6
02F6 C007      1089            push    ar7
02F8 C002      1090            push    ar2
02FA C003      1091            push    ar3
02FC 900000    1092            mov     dptr,#(0x00&0x00ff)
02FF E4        1093            clr     a
0300 F5F0      1094            mov     b,a
0302 7440      1095            mov     a,#0x40
0304 120000    1096            lcall   ___fsmul
0307 AA82      1097            mov     r2,dpl
0309 AB83      1098            mov     r3,dph
030B ACF0      1099            mov     r4,b
030D FD        1100            mov     r5,a
030E E581      1101            mov     a,sp
0310 24FC      1102            add     a,#0xfc
0312 F581      1103            mov     sp,a
0314 E4        1104            clr     a
0315 C0E0      1105            push    acc
0317 C0E0      1106            push    acc
0319 7480      1107            mov     a,#0x80
031B C0E0      1108            push    acc
031D 743F      1109            mov     a,#0x3F
031F C0E0      1110            push    acc
0321 8A82      1111            mov     dpl,r2
0323 8B83      1112            mov     dph,r3
0325 8CF0      1113            mov     b,r4
0327 ED        1114            mov     a,r5
0328 120000    1115            lcall   ___fssub
032B AA82      1116            mov     r2,dpl
032D AB83      1117            mov     r3,dph
032F ACF0      1118            mov     r4,b
0331 FD        1119            mov     r5,a
0332 E581      1120            mov     a,sp
0334 24FC      1121            add     a,#0xfc
0336 F581      1122            mov     sp,a
0338           1123   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:227: printf ("V@P2.2=%7.5fV, V@P2.3=%7.5fV, V@P2.4=%7.5fV, V@P2.5=%7.5fV, Horizontal:%7.5f, Vertical:%7.5f\r", v[0], v[1], v[2], v[3], norm_x, norm_y);
0338 C002      1124            push    ar2
033A C003      1125            push    ar3
033C C004      1126            push    ar4
033E C005      1127            push    ar5
0340 C038      1128            push    _main_norm_x_1_59
0342 C039      1129            push    (_main_norm_x_1_59 + 1)
0344 C03A      1130            push    (_main_norm_x_1_59 + 2)
0346 C03B      1131            push    (_main_norm_x_1_59 + 3)
0348 C078      1132            push    _main_sloc0_1_0
034A C079      1133            push    (_main_sloc0_1_0 + 1)
034C C07A      1134            push    (_main_sloc0_1_0 + 2)
034E C07B      1135            push    (_main_sloc0_1_0 + 3)
0350 C0F0      1136            push    (_main_v_1_59 + 0x0008)
0352 C0F1      1137            push    ((_main_v_1_59 + 0x0008) + 1)
0354 C0F2      1138            push    ((_main_v_1_59 + 0x0008) + 2)
0356 C0F3      1139            push    ((_main_v_1_59 + 0x0008) + 3)
0358 C0EC      1140            push    (_main_v_1_59 + 0x0004)
035A C0ED      1141            push    ((_main_v_1_59 + 0x0004) + 1)
035C C0EE      1142            push    ((_main_v_1_59 + 0x0004) + 2)
035E C0EF      1143            push    ((_main_v_1_59 + 0x0004) + 3)
0360 C0E8      1144            push    _main_v_1_59
0362 C0E9      1145            push    (_main_v_1_59 + 1)
0364 C0EA      1146            push    (_main_v_1_59 + 2)
0366 C0EB      1147            push    (_main_v_1_59 + 3)
0368 74B8      1148            mov     a,#__str_5
036A C0E0      1149            push    acc
036C 74B9      1150            mov     a,#(__str_5 >> 8)
036E C0E0      1151            push    acc
0370 7480      1152            mov     a,#0x80
0372 C0E0      1153            push    acc
0374 120000    1154            lcall   _printf
0377 E581      1155            mov     a,sp
0379 24E5      1156            add     a,#0xe5
037B F581      1157            mov     sp,a
037D           1158   ;        C:\Users\leigh\Elec291Project2\EFM8_examples\ADC\ADC.c:228: waitms(500);
037D 9001F4    1159            mov     dptr,#0x01F4
0380 120000    1160            lcall   _waitms
0383 020000    1161            ljmp    L009002?
0386           1162            rseg R_CSEG
0386           1163   
0000           1164            rseg R_XINIT
0000           1165   
0000           1166            rseg R_CONST
0000           1167   __str_0:
0000 1B        1168            db 0x1B
0001 5B324A    1169            db '[2J'
0004 00        1170            db 0x00
0005           1171   __str_1:
0005 41444320  1172            db 'ADC test program'
     74657374
     2070726F
     6772616D
0015 0A        1173            db 0x0A
0016 46696C65  1174            db 'File: %s'
     3A202573
001E 0A        1175            db 0x0A
001F 436F6D70  1176            db 'Compiled: %s, %s'
     696C6564
     3A202573
     2C202573
002F 0A        1177            db 0x0A
0030 0A        1178            db 0x0A
0031 00        1179            db 0x00
0032           1180   __str_2:
0032 433A      1181            db 'C:'
0034 5C        1182            db 0x5C
0035 55736572  1183            db 'Users'
     73
003A 5C        1184            db 0x5C
003B 6C656967  1185            db 'leigh'
     68
0040 5C        1186            db 0x5C
0041 456C6563  1187            db 'Elec291Project2'
     32393150
     726F6A65
     637432
0050 5C        1188            db 0x5C
0051 45464D38  1189            db 'EFM8_examples'
     5F657861
     6D706C65
     73
005E 5C        1190            db 0x5C
005F 414443    1191            db 'ADC'
0062 5C        1192            db 0x5C
0063 4144432E  1193            db 'ADC.c'
     63
0068 00        1194            db 0x00
0069           1195   __str_3:
0069 4D617220  1196            db 'Mar 21 2025'
     32312032
     303235
0074 00        1197            db 0x00
0075           1198   __str_4:
0075 31353A32  1199            db '15:27:24'
     373A3234
007D 00        1200            db 0x00
007E           1201   __str_5:
007E 56405032  1202            db 'V@P2.2=%7.5fV, V@P2.3=%7.5fV, V@P2.4=%7.5fV, V@P2.5=%7.5fV, '
     2E323D25
     372E3566
     562C2056
     4050322E
     333D2537
     2E356656
     2C205640
     50322E34
     3D25372E
     3566562C
     20564050
     322E353D
     25372E35
     66562C20
00BA 486F7269  1203            db 'Horizontal:%7.5f, Vertical:%7.5f'
     7A6F6E74
     616C3A25
     372E3566
     2C205665
     72746963
     616C3A25
     372E3566
00DA 0D        1204            db 0x0D
00DB 00        1205            db 0x00
00DC           1206   
0003           1207            CSEG
0003           1208   
0003           1209   end
